# Pipeline CI/CD para KRYONIX - Plataforma SaaS Brasileira
# Automação completa: teste, build, deploy e monitoramento

name: 🇧🇷 KRYONIX CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

# Permissões necessárias
permissions:
  contents: read
  packages: write
  security-events: write
  deployments: write
  id-token: write

# Variáveis globais
env:
  NODE_VERSION: "18.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === ANÁLISE DE CÓDIGO E LINTING ===
  code-quality:
    name: 🔍 Análise de Código
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🎨 Verificar formatação (Prettier)
        run: npm run format:check || true
        continue-on-error: true

      - name: 🔍 Lint (ESLint)
        run: npm run lint || true
        continue-on-error: true

      - name: 🔒 Auditoria de segurança
        run: npm audit --audit-level=moderate

      - name: 📊 Análise de dependências
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # === TESTES UNITÁRIOS E INTEGRAÇÃO ===
  tests:
    name: 🧪 Testes
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        test-suite: [unit, integration, api]

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: kryonix_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: kryonix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🔧 Setup variáveis de ambiente de teste
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgresql://kryonix_test:test_password@localhost:5432/kryonix_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: 🏃‍♂️ Executar testes ${{ matrix.test-suite }}
        run: npm run test:${{ matrix.test-suite }}
        env:
          NODE_ENV: test
          CI: true

      - name: 📊 Upload cobertura de código
        uses: codecov/codecov-action@v3
        if: matrix.test-suite == 'unit'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # === TESTES E2E ===
  e2e-tests:
    name: 🎭 Testes E2E
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🎭 Instalar Playwright
        run: npx playwright install --with-deps

      - name: 🏗️ Build da aplicação
        run: npm run build

      - name: 🚀 Iniciar aplicação
        run: npm start &
        env:
          NODE_ENV: test
          PORT: 3000

      - name: ⏳ Aguardar aplicação estar pronta
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: 🎭 Executar testes E2E
        run: npm run test:e2e

      - name: 📸 Upload screenshots dos testes falhos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 7

  # === BUILD E CONTAINERIZAÇÃO ===
  build:
    name: 🏗️ Build e Docker
    runs-on: ubuntu-latest
    needs: [tests, e2e-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Instalar dependências
        run: npm ci

      - name: 🏗️ Build da aplicação
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extrair metadados do Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build e push da imagem Docker
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # === ANÁLISE DE SEGURANÇA ===
  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔍 Executar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Executar análise CodeQL
        uses: github/codeql-action/analyze@v3

      - name: 🔒 Scan de segurança da imagem Docker
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload resultados do Trivy
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # === DEPLOY PARA STAGING ===
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.kryonix.com.br

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: 🔐 Configurar credenciais do cluster
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: 🚀 Deploy para staging
        run: |
          kubectl set image deployment/kryonix-staging kryonix=${{ needs.build.outputs.image-tag }} -n staging
          kubectl rollout status deployment/kryonix-staging -n staging --timeout=300s

      - name: 🔍 Verificar saúde da aplicação
        run: |
          kubectl get pods -n staging
          curl -f https://staging.kryonix.com.br/api/health || exit 1

      - name: 📊 Executar smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: https://staging.kryonix.com.br

  # === DEPLOY PARA PRODUÇÃO ===
  deploy-production:
    name: 🌟 Deploy Produção
    runs-on: ubuntu-latest
    needs: [build, security, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://app.kryonix.com.br

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: 🔐 Configurar credenciais do cluster
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > ~/.kube/config

      - name: 📊 Verificar capacidade do cluster
        run: |
          kubectl top nodes
          kubectl top pods -A

      - name: 🚀 Deploy blue-green para produção
        run: |
          # Implementar estratégia blue-green
          kubectl apply -f k8s/production/
          kubectl set image deployment/kryonix-green kryonix=${{ needs.build.outputs.image-tag }} -n production
          kubectl rollout status deployment/kryonix-green -n production --timeout=600s

      - name: 🔍 Testes de aceitação em produção
        run: |
          # Aguardar pods estarem prontos
          kubectl wait --for=condition=ready pod -l app=kryonix-green -n production --timeout=300s

          # Executar health check
          kubectl exec -n production deployment/kryonix-green -- curl -f http://localhost:3000/api/health

      - name: 🔄 Switch de tráfego (Blue-Green)
        run: |
          # Atualizar service para apontar para green
          kubectl patch service kryonix-service -n production -p '{"spec":{"selector":{"version":"green"}}}'

          # Aguardar e verificar
          sleep 30
          curl -f https://app.kryonix.com.br/api/health

      - name: 🧹 Limpeza da versão anterior
        run: |
          # Manter última versão por rollback
          kubectl scale deployment kryonix-blue --replicas=1 -n production

      - name: 📊 Métricas pós-deploy
        run: |
          echo "Deploy concluído com sucesso!"
          kubectl get pods -n production
          kubectl get services -n production

  # === MONITORAMENTO E NOTIFICAÇÕES ===
  monitoring:
    name: 📊 Monitoramento
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()

    steps:
      - name: 📈 Atualizar métricas de deploy
        run: |
          curl -X POST "${{ secrets.METRICS_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "pipeline": "kryonix-ci-cd",
              "status": "${{ job.status }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }'

      - name: 🔔 Notificar equipe no Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ job.status }}" === "success" ? "good" : "danger",
                "title": "🇧🇷 KRYONIX Deploy Status",
                "text": "Pipeline ${{ job.status }} para ${{ github.ref_name }}",
                "fields": [
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "${{ github.ref_name }}" === "main" ? "Production" : "Staging",
                    "short": true
                  }
                ]
              }]
            }

  # === LIMPEZA E OTIMIZAÇÃO ===
  cleanup:
    name: 🧹 Limpeza
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring]
    if: always()

    steps:
      - name: 🗑️ Limpar artefatos antigos
        run: |
          # Limpar imagens Docker antigas (manter últimas 5)
          gh api repos/${{ github.repository }}/packages/container/kryonix/versions \
            --jq '.[] | select(.metadata.container.tags | length == 0) | .id' \
            | head -n -5 \
            | xargs -I {} gh api --method DELETE repos/${{ github.repository }}/packages/container/kryonix/versions/{}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Relatório final
        run: |
          echo "## 🎉 Pipeline KRYONIX Concluído!" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tempo**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://app.kryonix.com.br" >> $GITHUB_STEP_SUMMARY

  # === WORKFLOWS AUXILIARES ===

  # Workflow para rollback automático em caso de problemas
  rollback:
    name: 🔄 Rollback Automático
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production

    steps:
      - name: 🚨 Executar rollback
        run: |
          kubectl rollout undo deployment/kryonix-green -n production
          kubectl rollout status deployment/kryonix-green -n production --timeout=300s

      - name: 🔔 Notificar rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: "#alerts"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "🚨 ROLLBACK AUTOMÁTICO EXECUTADO",
              "attachments": [{
                "color": "warning",
                "title": "KRYONIX - Rollback Produção",
                "text": "Deploy falhou, rollback automático executado",
                "fields": [
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ]
              }]
            }
