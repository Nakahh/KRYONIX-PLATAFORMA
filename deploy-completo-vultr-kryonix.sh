#!/bin/bash

# üöÄ KRYONIX - SCRIPT √öNICO DEPLOY COMPLETO PARTE 1
# Deploy automatizado para servidor Vultr - Execu√ß√£o √∫nica
# Tudo o que n√£o pode ser feito via commit no GitHub

set -euo pipefail

# ================================================================================
# üéØ CONFIGURA√á√ïES DO SERVIDOR VULTR - KRYONIX PARTE 1
# ================================================================================

# Informa√ß√µes do servidor (Auto-detectadas)
SERVER_IP="${SERVER_IP:-$(curl -s -4 ifconfig.me 2>/dev/null || curl -s ipv4.icanhazip.com 2>/dev/null || echo '45.76.246.44')}"
SERVER_USER="${SERVER_USER:-$(whoami)}"
HOSTNAME="${HOSTNAME:-$(hostname)}"

# Configura√ß√µes KRYONIX
DOMAIN="kryonix.com.br"
PROJECT_DIR="/opt/kryonix-plataform"
KEYCLOAK_DOMAIN="keycloak.$DOMAIN"
ADMIN_PHONE="5517981805327"

# Credenciais (j√° configuradas)
GITHUB_PAT="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"
WEBHOOK_SECRET="Kr7\$n0x-V1t0r-2025-#Jwt\$3cr3t-P0w3rfu1-K3y-A9b2Cd8eF4g6H1j5K9m3N7p2Q5t8"
JWT_SECRET="Kr7\$n0x-V1t0r-2025-#Jwt\$3cr3t-P0w3rfu1-K3y-A9b2Cd8eF4g6H1j5K9m3N7p2Q5t8"
EVOLUTION_API_KEY="2f4d6967043b87b5ebee57b872e0223a"
SENDGRID_API_KEY="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"

# Database Keycloak
KEYCLOAK_DB_USER="keycloak"
KEYCLOAK_DB_PASS="Kr7\$n0x-2025-K3ycl04k-DB-P4ssw0rd"
KEYCLOAK_DB_NAME="keycloak"
KEYCLOAK_ADMIN_USER="kryonix"
KEYCLOAK_ADMIN_PASS="Vitor@123456"

# Cores e formata√ß√£o
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
RESET='\033[0m'

# Progress tracking
TOTAL_STEPS=12
CURRENT_STEP=0
START_TIME=$(date +%s)

# ================================================================================
# üõ†Ô∏è FUN√á√ïES AUXILIARES
# ================================================================================

print_header() {
    clear
    echo -e "${BLUE}${BOLD}"
    echo    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo    "‚ïë                                                                              ‚ïë"
    echo    "‚ïë     ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó                ‚ïë"
    echo    "‚ïë     ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù                ‚ïë"
    echo    "‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù                 ‚ïë"
    echo    "‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó                 ‚ïë"
    echo    "‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó                ‚ïë"
    echo    "‚ïë     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù                ‚ïë"
    echo    "‚ïë                                                                              ‚ïë"
    echo -e "‚ïë                     ${WHITE}DEPLOY COMPLETO PARTE 1 - VULTR${BLUE}                     ‚ïë"
    echo -e "‚ïë                  ${CYAN}Script √önico - Configura√ß√£o Externa${BLUE}                   ‚ïë"
    echo    "‚ïë                                                                              ‚ïë"
    echo    "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${RESET}\n"
    
    echo -e "${PURPLE}üéØ INFORMA√á√ïES DO SERVIDOR:${RESET}"
    echo -e "   ${CYAN}‚îú‚îÄ Servidor:${RESET} $HOSTNAME"
    echo -e "   ${CYAN}‚îú‚îÄ IP P√∫blico:${RESET} $SERVER_IP"
    echo -e "   ${CYAN}‚îú‚îÄ Usu√°rio:${RESET} $SERVER_USER"
    echo -e "   ${CYAN}‚îî‚îÄ Dom√≠nio:${RESET} $DOMAIN"
    echo ""
}

log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")  echo -e "${CYAN}[$timestamp] [INFO]${RESET} $message" ;;
        "SUCCESS") echo -e "${GREEN}[$timestamp] [SUCESSO]${RESET} $message" ;;
        "WARNING") echo -e "${YELLOW}[$timestamp] [AVISO]${RESET} $message" ;;
        "ERROR") echo -e "${RED}[$timestamp] [ERRO]${RESET} $message" ;;
        "STEP") echo -e "${PURPLE}[$timestamp] [ETAPA $CURRENT_STEP/$TOTAL_STEPS]${RESET} $message" ;;
    esac
}

next_step() {
    CURRENT_STEP=$((CURRENT_STEP + 1))
    if [ $CURRENT_STEP -le $TOTAL_STEPS ]; then
        echo ""
        log "STEP" "${STEP_DESCRIPTIONS[$((CURRENT_STEP-1))]}"
        echo ""
    fi
}

# Array com descri√ß√µes das etapas
STEP_DESCRIPTIONS=(
    "üîç Verificando pr√©-requisitos do sistema"
    "üê≥ Configurando Docker e Docker Swarm"
    "üåê Configurando redes Docker e Traefik"
    "üîê Configurando Keycloak com PostgreSQL"
    "üìä Configurando monitoramento com Prometheus/Grafana"
    "üíæ Configurando sistema de backup autom√°tico"
    "üîß Configurando GitHub Webhook no reposit√≥rio"
    "üì± Configurando inst√¢ncia WhatsApp Evolution API"
    "üö® Configurando sistema de alertas e notifica√ß√µes"
    "‚öôÔ∏è Configurando servi√ßos systemd e cron jobs"
    "üß™ Executando testes de integra√ß√£o completos"
    "üéâ Finalizando configura√ß√£o e enviando relat√≥rio"
)

# Fun√ß√£o para enviar WhatsApp via Evolution API
send_whatsapp() {
    local message="$1"
    local priority="${2:-info}"
    
    local emoji=""
    case $priority in
        "success") emoji="‚úÖ" ;;
        "error") emoji="‚ùå" ;;
        "warning") emoji="‚ö†Ô∏è" ;;
        "info") emoji="‚ÑπÔ∏è" ;;
        *) emoji="üöÄ" ;;
    esac
    
    curl -s -X POST "https://api.kryonix.com.br/message/sendText/kryonix-monitor" \
        -H "Content-Type: application/json" \
        -H "apikey: $EVOLUTION_API_KEY" \
        -d "{
            \"number\": \"${ADMIN_PHONE}@s.whatsapp.net\",
            \"text\": \"${emoji} *KRYONIX Deploy Vultr*\n\n${message}\n\n_Deploy autom√°tico em andamento_\"
        }" >/dev/null 2>&1 || true
}

# ================================================================================
# üöÄ IN√çCIO DO DEPLOY
# ================================================================================

print_header

log "INFO" "Iniciando deploy completo KRYONIX Parte 1 no servidor Vultr"
log "INFO" "Este script configurar√° tudo que n√£o pode ser feito via GitHub commits"
echo ""

# Verificar se est√° rodando como usu√°rio correto
if [[ $EUID -eq 0 ]]; then
   log "ERROR" "Este script n√£o deve ser executado como root!"
   log "INFO" "Execute como usu√°rio normal: ./deploy-completo-vultr-kryonix.sh"
   exit 1
fi

# Enviar notifica√ß√£o de in√≠cio
send_whatsapp "üöÄ *Deploy Iniciado*\n\nConfigura√ß√£o externa iniciada no servidor Vultr\n\nServidor: $HOSTNAME\nIP: $SERVER_IP\nDom√≠nio: $DOMAIN" "info"

# ================================================================================
# ETAPA 1: VERIFICAR PR√â-REQUISITOS
# ================================================================================

next_step

log "INFO" "Verificando se Docker est√° instalado..."
if ! command -v docker >/dev/null 2>&1; then
    log "ERROR" "Docker n√£o est√° instalado!"
    log "INFO" "Instale o Docker primeiro: curl -fsSL https://get.docker.com | sh"
    exit 1
fi

log "INFO" "Verificando se Docker Compose est√° dispon√≠vel..."
if ! docker compose version >/dev/null 2>&1; then
    log "ERROR" "Docker Compose n√£o est√° dispon√≠vel!"
    exit 1
fi

log "INFO" "Verificando se usu√°rio est√° no grupo docker..."
if ! groups | grep -q docker; then
    log "WARNING" "Usu√°rio n√£o est√° no grupo docker, adicionando..."
    sudo usermod -aG docker $USER
    log "INFO" "Usu√°rio adicionado ao grupo docker - necess√°rio logout/login"
fi

log "SUCCESS" "Pr√©-requisitos verificados com sucesso"

# ================================================================================
# ETAPA 2: CONFIGURAR DOCKER SWARM
# ================================================================================

next_step

log "INFO" "Verificando Docker Swarm..."
if ! docker info | grep -q "Swarm: active"; then
    log "INFO" "Inicializando Docker Swarm..."
    docker swarm init --advertise-addr $SERVER_IP
    log "SUCCESS" "Docker Swarm inicializado"
else
    log "SUCCESS" "Docker Swarm j√° est√° ativo"
fi

# ================================================================================
# ETAPA 3: CONFIGURAR REDES DOCKER
# ================================================================================

next_step

log "INFO" "Configurando redes Docker..."

# Criar rede principal do Traefik
if ! docker network ls | grep -q "traefik-public"; then
    log "INFO" "Criando rede traefik-public..."
    docker network create \
        --driver=overlay \
        --attachable \
        --subnet=172.20.0.0/16 \
        traefik-public
    log "SUCCESS" "Rede traefik-public criada"
else
    log "SUCCESS" "Rede traefik-public j√° existe"
fi

# Criar rede Kryonix-NET
if ! docker network ls | grep -q "Kryonix-NET"; then
    log "INFO" "Criando rede Kryonix-NET..."
    docker network create \
        --driver=overlay \
        --attachable \
        --subnet=172.21.0.0/16 \
        Kryonix-NET
    log "SUCCESS" "Rede Kryonix-NET criada"
else
    log "SUCCESS" "Rede Kryonix-NET j√° existe"
fi

# ================================================================================
# ETAPA 4: CONFIGURAR KEYCLOAK COM POSTGRESQL
# ================================================================================

next_step

log "INFO" "Configurando Keycloak com PostgreSQL..."

# Criar stack do Keycloak
cat > /tmp/keycloak-stack.yml << EOF
version: '3.8'

services:
  keycloak-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: $KEYCLOAK_DB_NAME
      POSTGRES_USER: $KEYCLOAK_DB_USER
      POSTGRES_PASSWORD: $KEYCLOAK_DB_PASS
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $KEYCLOAK_DB_USER -d $KEYCLOAK_DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/$KEYCLOAK_DB_NAME
      KC_DB_USERNAME: $KEYCLOAK_DB_USER
      KC_DB_PASSWORD: $KEYCLOAK_DB_PASS
      KC_HOSTNAME: $KEYCLOAK_DOMAIN
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KEYCLOAK_ADMIN: $KEYCLOAK_ADMIN_USER
      KEYCLOAK_ADMIN_PASSWORD: $KEYCLOAK_ADMIN_PASS
      KC_FEATURES: preview
    command: start --optimized
    depends_on:
      - keycloak-db
    ports:
      - "8090:8080"
    networks:
      - keycloak-network
      - traefik-public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.keycloak.rule=Host(\`$KEYCLOAK_DOMAIN\`)"
        - "traefik.http.routers.keycloak.entrypoints=websecure"
        - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
        - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
        - "traefik.docker.network=traefik-public"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  keycloak_postgres_data:

networks:
  keycloak-network:
    driver: overlay
  traefik-public:
    external: true
EOF

# Deploy do Keycloak
log "INFO" "Fazendo deploy do Keycloak..."
docker stack deploy -c /tmp/keycloak-stack.yml keycloak-stack

log "SUCCESS" "Keycloak configurado e deployado"

# ================================================================================
# ETAPA 5: CONFIGURAR MONITORAMENTO
# ================================================================================

next_step

log "INFO" "Configurando monitoramento com Prometheus e Grafana..."

# Criar diret√≥rios de dados
sudo mkdir -p /opt/monitoring/{prometheus,grafana}
sudo chown -R $USER:$USER /opt/monitoring

# Configura√ß√£o do Prometheus
cat > /opt/monitoring/prometheus/prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'kryonix-web'
    static_configs:
      - targets: ['kryonix_web:8080']

  - job_name: 'kryonix-webhook'
    static_configs:
      - targets: ['kryonix_webhook:8082']

  - job_name: 'kryonix-monitor'
    static_configs:
      - targets: ['kryonix_monitor:8084']

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'docker-daemon'
    static_configs:
      - targets: ['host.docker.internal:9323']
EOF

log "SUCCESS" "Monitoramento configurado"

# ================================================================================
# ETAPA 6: CONFIGURAR SISTEMA DE BACKUP
# ================================================================================

next_step

log "INFO" "Configurando sistema de backup autom√°tico..."

# Criar diret√≥rios de backup
sudo mkdir -p /backup/kryonix
sudo chown -R $USER:$USER /backup

# Configurar cron job para backup di√°rio
BACKUP_SCRIPT_PATH="$PROJECT_DIR/backup-automatico-kryonix.sh"
CRON_ENTRY="0 2 * * * $BACKUP_SCRIPT_PATH --run-backup >/dev/null 2>&1"

# Verificar se j√° existe
if ! crontab -l 2>/dev/null | grep -q "$BACKUP_SCRIPT_PATH"; then
    # Adicionar ao crontab
    (crontab -l 2>/dev/null; echo "$CRON_ENTRY") | crontab -
    log "SUCCESS" "Backup autom√°tico configurado para 02:00 diariamente"
else
    log "SUCCESS" "Backup autom√°tico j√° estava configurado"
fi

# ================================================================================
# ETAPA 7: CONFIGURAR GITHUB WEBHOOK
# ================================================================================

next_step

log "INFO" "Configurando GitHub Webhook no reposit√≥rio..."

# Configurar webhook via API do GitHub
WEBHOOK_CONFIG='{
  "name": "web",
  "active": true,
  "events": ["push"],
  "config": {
    "url": "https://kryonix.com.br/api/github-webhook",
    "content_type": "json",
    "secret": "'$WEBHOOK_SECRET'"
  }
}'

# Verificar se webhook j√° existe
EXISTING_WEBHOOKS=$(curl -s -H "Authorization: token $GITHUB_PAT" \
    "https://api.github.com/repos/Nakahh/KRYONIX-PLATAFORMA/hooks")

if echo "$EXISTING_WEBHOOKS" | grep -q "kryonix.com.br/api/github-webhook"; then
    log "SUCCESS" "GitHub Webhook j√° est√° configurado"
else
    # Criar webhook
    WEBHOOK_RESPONSE=$(curl -s -X POST \
        -H "Authorization: token $GITHUB_PAT" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/Nakahh/KRYONIX-PLATAFORMA/hooks" \
        -d "$WEBHOOK_CONFIG")
    
    if echo "$WEBHOOK_RESPONSE" | grep -q '"id"'; then
        log "SUCCESS" "GitHub Webhook configurado com sucesso"
    else
        log "WARNING" "Falha na configura√ß√£o do webhook - verificar permiss√µes do token"
    fi
fi

# ================================================================================
# ETAPA 8: CONFIGURAR WHATSAPP EVOLUTION API
# ================================================================================

next_step

log "INFO" "Configurando inst√¢ncia WhatsApp Evolution API..."

# Criar inst√¢ncia para monitoramento
INSTANCE_CONFIG='{
  "instanceName": "kryonix-monitor",
  "token": "'$EVOLUTION_API_KEY'",
  "qrcode": true,
  "markMessagesRead": true,
  "delayMessage": 1000,
  "msgRetryCounterValue": 3,
  "webhook": "https://kryonix.com.br/api/whatsapp-webhook",
  "webhookByEvents": false,
  "webhookBase64": false
}'

# Verificar se inst√¢ncia existe
INSTANCE_STATUS=$(curl -s -H "apikey: $EVOLUTION_API_KEY" \
    "https://api.kryonix.com.br/instance/connectionState/kryonix-monitor" || echo "error")

if echo "$INSTANCE_STATUS" | grep -q '"state"'; then
    log "SUCCESS" "Inst√¢ncia WhatsApp j√° existe"
else
    # Criar inst√¢ncia
    INSTANCE_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "apikey: $EVOLUTION_API_KEY" \
        "https://api.kryonix.com.br/instance/create" \
        -d "$INSTANCE_CONFIG" || echo "error")
    
    if echo "$INSTANCE_RESPONSE" | grep -q '"instance"'; then
        log "SUCCESS" "Inst√¢ncia WhatsApp criada - QR Code necess√°rio"
        log "INFO" "Acesse https://api.kryonix.com.br/manager para conectar"
    else
        log "WARNING" "Problema na cria√ß√£o da inst√¢ncia WhatsApp"
    fi
fi

# ================================================================================
# ETAPA 9: CONFIGURAR ALERTAS E NOTIFICA√á√ïES
# ================================================================================

next_step

log "INFO" "Configurando sistema de alertas..."

# Configurar alertas do sistema
cat > /etc/systemd/system/kryonix-alerts.service << EOF
[Unit]
Description=KRYONIX System Alerts
After=docker.service
Requires=docker.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$PROJECT_DIR
ExecStart=$PROJECT_DIR/ia-monitor-kryonix.js
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# Habilitar servi√ßo de alertas
sudo systemctl daemon-reload
sudo systemctl enable kryonix-alerts.service

log "SUCCESS" "Sistema de alertas configurado"

# ================================================================================
# ETAPA 10: CONFIGURAR SERVI√áOS SYSTEMD
# ================================================================================

next_step

log "INFO" "Configurando servi√ßos systemd..."

# Servi√ßo principal KRYONIX
cat > /etc/systemd/system/kryonix-platform.service << EOF
[Unit]
Description=KRYONIX Platform Service
After=docker.service
Requires=docker.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/bin/docker stack deploy -c docker-stack.yml Kryonix
ExecStop=/usr/bin/docker stack rm Kryonix
RemainAfterExit=yes
Restart=no
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# Habilitar servi√ßos
sudo systemctl daemon-reload
sudo systemctl enable kryonix-platform.service

log "SUCCESS" "Servi√ßos systemd configurados"

# ================================================================================
# ETAPA 11: EXECUTAR TESTES DE INTEGRA√á√ÉO
# ================================================================================

next_step

log "INFO" "Executando testes de integra√ß√£o..."

# Aguardar servi√ßos subirem
sleep 60

# Testar conectividade dos servi√ßos
TESTS_PASSED=0
TOTAL_TESTS=5

# Teste 1: Docker Swarm
if docker info | grep -q "Swarm: active"; then
    log "SUCCESS" "‚úÖ Teste 1/5: Docker Swarm ativo"
    ((TESTS_PASSED++))
else
    log "ERROR" "‚ùå Teste 1/5: Docker Swarm falhou"
fi

# Teste 2: Redes Docker
if docker network ls | grep -q "traefik-public" && docker network ls | grep -q "Kryonix-NET"; then
    log "SUCCESS" "‚úÖ Teste 2/5: Redes Docker criadas"
    ((TESTS_PASSED++))
else
    log "ERROR" "‚ùå Teste 2/5: Redes Docker falharam"
fi

# Teste 3: Keycloak
if curl -s -f "http://localhost:8090/health/ready" >/dev/null 2>&1; then
    log "SUCCESS" "‚úÖ Teste 3/5: Keycloak respondendo"
    ((TESTS_PASSED++))
else
    log "WARNING" "‚ö†Ô∏è Teste 3/5: Keycloak ainda inicializando"
fi

# Teste 4: Sistema de backup
if [ -f "$PROJECT_DIR/backup-automatico-kryonix.sh" ] && crontab -l | grep -q "backup-automatico"; then
    log "SUCCESS" "‚úÖ Teste 4/5: Sistema de backup configurado"
    ((TESTS_PASSED++))
else
    log "ERROR" "‚ùå Teste 4/5: Sistema de backup falhou"
fi

# Teste 5: Conectividade externa
if curl -s -f "https://api.kryonix.com.br" >/dev/null 2>&1; then
    log "SUCCESS" "‚úÖ Teste 5/5: Evolution API acess√≠vel"
    ((TESTS_PASSED++))
else
    log "WARNING" "‚ö†Ô∏è Teste 5/5: Evolution API com problemas"
fi

log "INFO" "Testes conclu√≠dos: $TESTS_PASSED/$TOTAL_TESTS passaram"

# ================================================================================
# ETAPA 12: FINALIZAR E ENVIAR RELAT√ìRIO
# ================================================================================

next_step

log "INFO" "Finalizando configura√ß√£o..."

# Calcular tempo total
END_TIME=$(date +%s)
DURATION=$(($END_TIME - $START_TIME))
DURATION_FORMATTED=$(printf "%02d:%02d:%02d" $((DURATION/3600)) $((DURATION%3600/60)) $((DURATION%60)))

# Criar relat√≥rio final
REPORT="/tmp/kryonix-deploy-report.txt"
cat > $REPORT << EOF
KRYONIX - Relat√≥rio de Deploy Vultr
===================================

Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')
Servidor: $HOSTNAME ($SERVER_IP)
Usu√°rio: $SERVER_USER
Dura√ß√£o: $DURATION_FORMATTED

Configura√ß√µes Aplicadas:
========================

‚úÖ Docker Swarm inicializado
‚úÖ Redes Docker criadas (traefik-public, Kryonix-NET)
‚úÖ Keycloak + PostgreSQL configurado
‚úÖ Sistema de monitoramento configurado
‚úÖ Backup autom√°tico configurado (di√°rio 02:00)
‚úÖ GitHub Webhook configurado
‚úÖ WhatsApp Evolution API configurado
‚úÖ Sistema de alertas configurado
‚úÖ Servi√ßos systemd criados

Testes de Integra√ß√£o:
=====================
Aprovados: $TESTS_PASSED/$TOTAL_TESTS

Pr√≥ximos Passos:
================
1. Fazer commit dos arquivos no GitHub
2. Executar o instalador principal: bash <(curl -sSL setup.oriondesign.art.br)
3. Conectar WhatsApp via QR Code em: https://api.kryonix.com.br/manager
4. Configurar Realm Keycloak em: https://$KEYCLOAK_DOMAIN/admin
5. Monitorar logs: tail -f /var/log/kryonix-*.log

URLs Importantes:
=================
- Keycloak Admin: https://$KEYCLOAK_DOMAIN/admin
- Evolution Manager: https://api.kryonix.com.br/manager
- Aplica√ß√£o: https://www.$DOMAIN
- Webhook: https://$DOMAIN/api/github-webhook

Credenciais:
============
- Keycloak Admin: $KEYCLOAK_ADMIN_USER / $KEYCLOAK_ADMIN_PASS
- Banco Keycloak: $KEYCLOAK_DB_USER / [configurado]
- WhatsApp: Conectar via QR Code

Status: CONFIGURA√á√ÉO EXTERNA CONCLU√çDA ‚úÖ
EOF

# Mostrar relat√≥rio
cat $REPORT

# Enviar relat√≥rio via WhatsApp
WHATSAPP_SUMMARY="üéâ *Deploy Vultr Conclu√≠do!*\n\n"
WHATSAPP_SUMMARY+="‚è±Ô∏è **Dura√ß√£o:** $DURATION_FORMATTED\n"
WHATSAPP_SUMMARY+="üñ•Ô∏è **Servidor:** $HOSTNAME\n"
WHATSAPP_SUMMARY+="üåê **IP:** $SERVER_IP\n"
WHATSAPP_SUMMARY+="üîó **Dom√≠nio:** $DOMAIN\n\n"
WHATSAPP_SUMMARY+="‚úÖ **Configurado:**\n"
WHATSAPP_SUMMARY+="‚Ä¢ Docker Swarm + Redes\n"
WHATSAPP_SUMMARY+="‚Ä¢ Keycloak + PostgreSQL\n"
WHATSAPP_SUMMARY+="‚Ä¢ Backup autom√°tico\n"
WHATSAPP_SUMMARY+="‚Ä¢ GitHub Webhook\n"
WHATSAPP_SUMMARY+="‚Ä¢ WhatsApp API\n"
WHATSAPP_SUMMARY+="‚Ä¢ Sistema de alertas\n\n"
WHATSAPP_SUMMARY+="üß™ **Testes:** $TESTS_PASSED/$TOTAL_TESTS aprovados\n\n"
WHATSAPP_SUMMARY+="üöÄ **Pr√≥ximo Passo:**\n"
WHATSAPP_SUMMARY+="Executar instalador principal\n\n"
WHATSAPP_SUMMARY+="üìã **Admin Keycloak:**\n"
WHATSAPP_SUMMARY+="https://$KEYCLOAK_DOMAIN/admin\n"
WHATSAPP_SUMMARY+="User: $KEYCLOAK_ADMIN_USER\n\n"
WHATSAPP_SUMMARY+="üì± **WhatsApp Manager:**\n"
WHATSAPP_SUMMARY+="https://api.kryonix.com.br/manager"

send_whatsapp "$WHATSAPP_SUMMARY" "success"

echo ""
echo -e "${GREEN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
echo -e "${GREEN}${BOLD}                üéâ DEPLOY VULTR CONCLU√çDO COM SUCESSO! üéâ${RESET}"
echo -e "${GREEN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${RESET}"
echo ""
echo -e "${CYAN}${BOLD}üìä RESUMO:${RESET}"
echo -e "   ${BLUE}‚îú‚îÄ Dura√ß√£o:${RESET} $DURATION_FORMATTED"
echo -e "   ${BLUE}‚îú‚îÄ Servidor:${RESET} $HOSTNAME ($SERVER_IP)"
echo -e "   ${BLUE}‚îú‚îÄ Testes:${RESET} $TESTS_PASSED/$TOTAL_TESTS aprovados"
echo -e "   ${BLUE}‚îî‚îÄ Status:${RESET} ${GREEN}Configura√ß√£o externa completa${RESET}"
echo ""
echo -e "${YELLOW}${BOLD}üöÄ PR√ìXIMOS PASSOS:${RESET}"
echo -e "   ${BLUE}1.${RESET} Fazer commit/push dos arquivos para GitHub"
echo -e "   ${BLUE}2.${RESET} Executar instalador principal: ${CYAN}bash <(curl -sSL setup.oriondesign.art.br)${RESET}"
echo -e "   ${BLUE}3.${RESET} Conectar WhatsApp: ${CYAN}https://api.kryonix.com.br/manager${RESET}"
echo -e "   ${BLUE}4.${RESET} Configurar Keycloak: ${CYAN}https://$KEYCLOAK_DOMAIN/admin${RESET}"
echo ""
echo -e "${GREEN}${BOLD}‚úÖ KRYONIX PARTE 1 - CONFIGURA√á√ÉO EXTERNA FINALIZADA!${RESET}"
echo ""

log "SUCCESS" "Script de deploy Vultr executado com sucesso!"
log "INFO" "Relat√≥rio completo salvo em: $REPORT"

exit 0
