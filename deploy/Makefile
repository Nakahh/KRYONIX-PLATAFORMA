# ============================================================================
# KRYONIX Platform - Makefile para Deploy Autom√°tico
# ============================================================================

.PHONY: help setup-vercel setup-render deploy-backend deploy-frontend deploy-all health-check clean

# Configura√ß√µes
FRONTEND_URL ?= https://kryonix-frontend.vercel.app
BACKEND_URL ?= https://kryonix-backend.onrender.com

# Cores para output
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

help: ## Mostrar ajuda
	@echo "$(BLUE)üöÄ KRYONIX Platform - Deploy Automation$(NC)"
	@echo "$(BLUE)========================================$(NC)"
	@echo
	@echo "$(GREEN)Comandos dispon√≠veis:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo
	@echo "$(GREEN)Exemplos:$(NC)"
	@echo "  make setup-all          # Configurar tudo automaticamente"
	@echo "  make deploy-all          # Deploy completo (backend + frontend)"
	@echo "  make health-check        # Verificar sa√∫de dos servi√ßos"

setup-vercel: ## Configurar ambiente Vercel
	@echo "$(BLUE)üì¶ Configurando Vercel CLI...$(NC)"
	@command -v vercel >/dev/null 2>&1 || npm install -g vercel@latest
	@echo "$(GREEN)‚úÖ Vercel CLI pronto$(NC)"

setup-render: ## Configurar ambiente Render
	@echo "$(BLUE)üì¶ Configurando Render CLI...$(NC)"
	@if ! command -v render >/dev/null 2>&1; then \
		echo "$(YELLOW)Instalando Render CLI...$(NC)"; \
		if [[ "$$OSTYPE" == "darwin"* ]]; then \
			brew install render 2>/dev/null || echo "$(RED)Instale manualmente: https://docs.render.com/cli$(NC)"; \
		else \
			echo "$(RED)Instale o Render CLI: https://docs.render.com/cli$(NC)"; \
		fi \
	fi
	@echo "$(GREEN)‚úÖ Render CLI pronto$(NC)"

setup-all: setup-vercel setup-render ## Configurar todos os ambientes
	@echo "$(GREEN)üéâ Todos os ambientes configurados!$(NC)"

check-prereq: ## Verificar pr√©-requisitos
	@echo "$(BLUE)üîç Verificando pr√©-requisitos...$(NC)"
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå Node.js n√£o encontrado$(NC)"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "$(RED)‚ùå npm n√£o encontrado$(NC)"; exit 1; }
	@command -v git >/dev/null 2>&1 || { echo "$(RED)‚ùå git n√£o encontrado$(NC)"; exit 1; }
	@node_version=$$(node --version | cut -d'v' -f2 | cut -d'.' -f1); \
	if [ "$$node_version" -lt 18 ]; then \
		echo "$(RED)‚ùå Node.js 18+ necess√°rio. Vers√£o atual: $$(node --version)$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Todos os pr√©-requisitos atendidos$(NC)"

prepare-backend: ## Preparar arquivos para backend
	@echo "$(BLUE)üîß Preparando arquivos do backend...$(NC)"
	@chmod +x deploy/render-installer.sh
	@echo "$(GREEN)‚úÖ Backend preparado$(NC)"

prepare-frontend: ## Preparar arquivos para frontend  
	@echo "$(BLUE)üîß Preparando arquivos do frontend...$(NC)"
	@chmod +x deploy/vercel-installer.sh
	@echo "$(GREEN)‚úÖ Frontend preparado$(NC)"

deploy-backend: check-prereq prepare-backend ## Deploy do backend no Render
	@echo "$(BLUE)üöÄ Iniciando deploy do backend...$(NC)"
	@./deploy/render-installer.sh
	@echo "$(GREEN)‚úÖ Backend deployado com sucesso!$(NC)"

deploy-frontend: check-prereq prepare-frontend ## Deploy do frontend no Vercel
	@echo "$(BLUE)üöÄ Iniciando deploy do frontend...$(NC)"
	@./deploy/vercel-installer.sh
	@echo "$(GREEN)‚úÖ Frontend deployado com sucesso!$(NC)"

deploy-all: deploy-backend deploy-frontend ## Deploy completo (backend + frontend)
	@echo "$(GREEN)üéâ Deploy completo realizado!$(NC)"
	@echo "$(BLUE)üìä URLs dos servi√ßos:$(NC)"
	@echo "  Frontend: $(FRONTEND_URL)"
	@echo "  Backend:  $(BACKEND_URL)"

health-check: ## Verificar sa√∫de dos servi√ßos
	@echo "$(BLUE)üîç Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo -n "Frontend: "
	@if curl -sf "$(FRONTEND_URL)/health" >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ OK$(NC)"; \
	else \
		echo "$(RED)‚ùå ERRO$(NC)"; \
	fi
	@echo -n "Backend:  "
	@if curl -sf "$(BACKEND_URL)/health" >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ OK$(NC)"; \
	else \
		echo "$(RED)‚ùå ERRO$(NC)"; \
	fi

test-endpoints: health-check ## Testar endpoints principais
	@echo "$(BLUE)üß™ Testando endpoints...$(NC)"
	@echo -n "API Status: "
	@if curl -sf "$(BACKEND_URL)/api/status" >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ OK$(NC)"; \
	else \
		echo "$(RED)‚ùå ERRO$(NC)"; \
	fi

logs-vercel: ## Ver logs do Vercel
	@echo "$(BLUE)üìã Logs do Vercel:$(NC)"
	@vercel logs $(FRONTEND_URL) 2>/dev/null || echo "$(YELLOW)Execute 'vercel login' primeiro$(NC)"

logs-render: ## Ver logs do Render
	@echo "$(BLUE)üìã Logs do Render:$(NC)"
	@render logs kryonix-backend --tail 2>/dev/null || echo "$(YELLOW)Execute 'render auth login' primeiro$(NC)"

status: ## Ver status dos servi√ßos
	@echo "$(BLUE)üìä Status dos servi√ßos:$(NC)"
	@echo "$(YELLOW)Vercel:$(NC)"
	@vercel ls 2>/dev/null || echo "  $(RED)N√£o autenticado$(NC)"
	@echo "$(YELLOW)Render:$(NC)"
	@render services list 2>/dev/null || echo "  $(RED)N√£o autenticado$(NC)"

env-setup: ## Configurar vari√°veis de ambiente
	@echo "$(BLUE)‚öôÔ∏è Configurando vari√°veis de ambiente...$(NC)"
	@echo "$(YELLOW)Vercel - Configure as seguintes vari√°veis:$(NC)"
	@echo "  NEXT_PUBLIC_API_URL=$(BACKEND_URL)"
	@echo "  NODE_ENV=production"
	@echo
	@echo "$(YELLOW)Render - As principais s√£o auto-configuradas:$(NC)"
	@echo "  DATABASE_URL (autom√°tico)"
	@echo "  REDIS_URL (autom√°tico)"
	@echo "  JWT_SECRET (auto-gerado)"

clean: ## Limpar arquivos tempor√°rios
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(NC)"
	@rm -f deploy/*.backup deploy/*.tmp deploy/*.log
	@rm -f next.config.vercel.js package.frontend.json package.backend.json
	@rm -f Dockerfile.render post-deploy.sh
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(NC)"

reset: clean ## Reset completo (limpar + recriar configs)
	@echo "$(BLUE)üîÑ Reset completo...$(NC)"
	@rm -f vercel.json render.yaml .vercelignore
	@echo "$(GREEN)‚úÖ Reset conclu√≠do$(NC)"

# Deploy r√°pido para desenvolvimento
dev-deploy: ## Deploy r√°pido para testes
	@echo "$(BLUE)‚ö° Deploy r√°pido para desenvolvimento...$(NC)"
	@echo "$(YELLOW)Backend...$(NC)"
	@render deploy --service=kryonix-backend 2>/dev/null || echo "Configure Render primeiro"
	@echo "$(YELLOW)Frontend...$(NC)" 
	@vercel --prod 2>/dev/null || echo "Configure Vercel primeiro"
	@echo "$(GREEN)‚úÖ Deploy r√°pido conclu√≠do$(NC)"

# Backup dos arquivos de configura√ß√£o
backup: ## Fazer backup das configura√ß√µes
	@echo "$(BLUE)üíæ Fazendo backup...$(NC)"
	@mkdir -p backup/$(shell date +%Y%m%d_%H%M%S)
	@cp -r deploy/ backup/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
	@cp vercel.json backup/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
	@cp render.yaml backup/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Backup criado em backup/$(shell date +%Y%m%d_%H%M%S)$(NC)"

# Comandos de manuten√ß√£o
update-deps: ## Atualizar depend√™ncias
	@echo "$(BLUE)üì¶ Atualizando depend√™ncias...$(NC)"
	@npm update
	@npm audit fix --force
	@echo "$(GREEN)‚úÖ Depend√™ncias atualizadas$(NC)"

# Monitoramento cont√≠nuo
monitor: ## Monitoramento cont√≠nuo (Ctrl+C para parar)
	@echo "$(BLUE)üìä Monitoramento cont√≠nuo iniciado...$(NC)"
	@echo "$(YELLOW)Pressione Ctrl+C para parar$(NC)"
	@while true; do \
		echo -n "$$(date '+%H:%M:%S') - "; \
		if curl -sf "$(BACKEND_URL)/health" >/dev/null 2>&1; then \
			echo -n "$(GREEN)Backend OK$(NC) "; \
		else \
			echo -n "$(RED)Backend DOWN$(NC) "; \
		fi; \
		if curl -sf "$(FRONTEND_URL)/health" >/dev/null 2>&1; then \
			echo "$(GREEN)Frontend OK$(NC)"; \
		else \
			echo "$(RED)Frontend DOWN$(NC)"; \
		fi; \
		sleep 30; \
	done

# Informa√ß√µes do projeto
info: ## Mostrar informa√ß√µes do projeto
	@echo "$(BLUE)‚ÑπÔ∏è  Informa√ß√µes do Projeto KRYONIX$(NC)"
	@echo "$(BLUE)================================$(NC)"
	@echo "$(YELLOW)Frontend URL:$(NC) $(FRONTEND_URL)"
	@echo "$(YELLOW)Backend URL:$(NC)  $(BACKEND_URL)"
	@echo "$(YELLOW)Health Frontend:$(NC) $(FRONTEND_URL)/health"
	@echo "$(YELLOW)Health Backend:$(NC)  $(BACKEND_URL)/health"
	@echo "$(YELLOW)API Status:$(NC) $(BACKEND_URL)/api/status"
	@echo
	@echo "$(YELLOW)Dashboards:$(NC)"
	@echo "  Vercel: https://vercel.com/dashboard"
	@echo "  Render: https://dashboard.render.com"
