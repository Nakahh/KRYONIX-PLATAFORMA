#!/bin/bash

# üîß KRYONIX - Configurar Keycloak Existente
# Script para configurar o Keycloak que j√° est√° rodando

set -euo pipefail

# Configura√ß√µes
KEYCLOAK_ADMIN_USER="kryonix"
KEYCLOAK_ADMIN_PASSWORD="Vitor@123456"
DOMAIN_BASE="kryonix.com.br"

echo "üîç KRYONIX - Configurando Keycloak Existente"
echo "============================================="

# 1. Parar o servi√ßo que est√° falhando
echo "üõë Parando servi√ßo kryonix-auth que est√° falhando..."
docker stack rm kryonix-auth 2>/dev/null || echo "Servi√ßo j√° removido"
sleep 5

# 2. Verificar Keycloak existente
echo "üîç Verificando Keycloak existente..."
if docker ps | grep -q "keycloak_keycloak"; then
    echo "‚úÖ Keycloak existente encontrado"
    
    # Obter IP do container
    KEYCLOAK_CONTAINER=$(docker ps --format "{{.Names}}" | grep "keycloak_keycloak" | head -1)
    KEYCLOAK_IP=$(docker inspect $KEYCLOAK_CONTAINER --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 2>/dev/null || echo "")
    
    echo "üìã Container: $KEYCLOAK_CONTAINER"
    echo "üåê IP: ${KEYCLOAK_IP:-'N/A'}"
    
    # Testar URLs poss√≠veis
    KEYCLOAK_URLS=(
        "https://keycloak.$DOMAIN_BASE"
        "http://localhost:8080" 
        "http://127.0.0.1:8080"
        "http://$KEYCLOAK_IP:8080"
    )
    
    KEYCLOAK_URL=""
    for url in "${KEYCLOAK_URLS[@]}"; do
        echo "üîç Testando: $url"
        if curl -f -s --max-time 5 "$url" > /dev/null 2>&1; then
            KEYCLOAK_URL="$url"
            echo "‚úÖ Keycloak acess√≠vel em: $url"
            break
        fi
    done
    
    if [ -z "$KEYCLOAK_URL" ]; then
        echo "‚ùå Keycloak n√£o acess√≠vel em nenhuma URL"
        echo "üîß Tentando atrav√©s do proxy da porta..."
        # Verificar se h√° redirecionamento de porta
        if netstat -tlnp 2>/dev/null | grep -q ":8080"; then
            KEYCLOAK_URL="http://localhost:8080"
            echo "‚úÖ Usando proxy local: $KEYCLOAK_URL"
        else
            echo "‚ùå Keycloak n√£o est√° acess√≠vel"
            exit 1
        fi
    fi
    
else
    echo "‚ùå Nenhum Keycloak encontrado"
    exit 1
fi

# 3. Testar autentica√ß√£o
echo ""
echo "üîê Testando autentica√ß√£o admin..."
ADMIN_TOKEN=$(curl -s --max-time 30 \
    -d "client_id=admin-cli" \
    -d "username=$KEYCLOAK_ADMIN_USER" \
    -d "password=$KEYCLOAK_ADMIN_PASSWORD" \
    -d "grant_type=password" \
    "$KEYCLOAK_URL/realms/master/protocol/openid_connect/token" | \
    jq -r '.access_token' 2>/dev/null || echo "")

if [ -z "$ADMIN_TOKEN" ] || [ "$ADMIN_TOKEN" = "null" ]; then
    echo "‚ùå Falha na autentica√ß√£o"
    echo "üîß Credenciais utilizadas:"
    echo "   Usu√°rio: $KEYCLOAK_ADMIN_USER"
    echo "   URL: $KEYCLOAK_URL"
    echo ""
    echo "üí° Tente verificar:"
    echo "   1. Se o Keycloak est√° funcionando: docker logs $KEYCLOAK_CONTAINER"
    echo "   2. Se as credenciais est√£o corretas"
    echo "   3. Se h√° proxy redirecionando para HTTPS"
    exit 1
else
    echo "‚úÖ Autentica√ß√£o admin realizada com sucesso"
fi

# 4. Verificar realm KRYONIX
echo ""
echo "üè¢ Verificando realm KRYONIX..."
if curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "$KEYCLOAK_URL/admin/realms/KRYONIX" > /dev/null 2>&1; then
    echo "‚úÖ Realm KRYONIX j√° existe"
else
    echo "üîß Criando realm KRYONIX..."
    
    # Criar realm
    REALM_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$KEYCLOAK_URL/admin/realms" \
        -H "Authorization: Bearer $ADMIN_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
            "realm": "KRYONIX",
            "enabled": true,
            "displayName": "KRYONIX - Plataforma SaaS",
            "displayNameHtml": "<strong>KRYONIX</strong> - Sua Plataforma de Neg√≥cios",
            "defaultLocale": "pt-BR",
            "internationalizationEnabled": true,
            "supportedLocales": ["pt-BR"],
            "registrationAllowed": false,
            "loginWithEmailAllowed": true,
            "bruteForceProtected": true,
            "attributes": {
                "multi_tenant": "true",
                "mobile_priority": "true",
                "created_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }
        }')
    
    if [[ "$REALM_RESPONSE" =~ ^(200|201|409)$ ]]; then
        echo "‚úÖ Realm KRYONIX criado/atualizado"
    else
        echo "‚ö†Ô∏è Poss√≠vel problema na cria√ß√£o do realm (c√≥digo: $REALM_RESPONSE)"
    fi
fi

# 5. Criar clients principais
echo ""
echo "üîß Configurando clients..."

# Client Frontend
curl -s -X POST "$KEYCLOAK_URL/admin/realms/KRYONIX/clients" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "clientId": "kryonix-frontend",
        "name": "KRYONIX Frontend",
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "kryonix-frontend-secret-2025",
        "redirectUris": [
            "https://app.'$DOMAIN_BASE'/*",
            "https://www.'$DOMAIN_BASE'/*",
            "https://*.'$DOMAIN_BASE'/*",
            "http://localhost:3000/*"
        ],
        "webOrigins": ["*"],
        "protocol": "openid-connect",
        "publicClient": false,
        "standardFlowEnabled": true,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": true
    }' > /dev/null 2>&1 && echo "‚úÖ Client Frontend criado" || echo "‚ö†Ô∏è Client Frontend (pode j√° existir)"

# Client Mobile
curl -s -X POST "$KEYCLOAK_URL/admin/realms/KRYONIX/clients" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "clientId": "kryonix-mobile-app",
        "name": "KRYONIX Mobile App",
        "enabled": true,
        "clientAuthenticatorType": "client-secret",
        "secret": "kryonix-mobile-secret-2025",
        "redirectUris": [
            "kryonix://auth/callback",
            "https://app.'$DOMAIN_BASE'/mobile/callback"
        ],
        "webOrigins": ["*"],
        "protocol": "openid-connect",
        "publicClient": false,
        "standardFlowEnabled": true,
        "directAccessGrantsEnabled": true
    }' > /dev/null 2>&1 && echo "‚úÖ Client Mobile criado" || echo "‚ö†Ô∏è Client Mobile (pode j√° existir)"

# 6. Criar usu√°rio admin
echo ""
echo "üë§ Configurando usu√°rio admin..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/KRYONIX/users" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "username": "'$KEYCLOAK_ADMIN_USER'",
        "email": "admin@'$DOMAIN_BASE'",
        "firstName": "KRYONIX",
        "lastName": "Master",
        "enabled": true,
        "emailVerified": true,
        "credentials": [{
            "type": "password",
            "value": "'$KEYCLOAK_ADMIN_PASSWORD'",
            "temporary": false
        }],
        "attributes": {
            "whatsapp": ["+5517981805327"],
            "role": ["admin"]
        }
    }' > /dev/null 2>&1 && echo "‚úÖ Usu√°rio admin criado" || echo "‚ö†Ô∏è Usu√°rio admin (pode j√° existir)"

# 7. Testes finais
echo ""
echo "üß™ Executando testes finais..."

# Teste realm
if curl -s "$KEYCLOAK_URL/realms/KRYONIX/.well-known/openid_configuration" | grep -q "KRYONIX"; then
    echo "‚úÖ Realm KRYONIX funcionando"
else
    echo "‚ö†Ô∏è Problema no realm KRYONIX"
fi

# Teste login
if curl -s -d "client_id=admin-cli" -d "username=$KEYCLOAK_ADMIN_USER" -d "password=$KEYCLOAK_ADMIN_PASSWORD" -d "grant_type=password" "$KEYCLOAK_URL/realms/master/protocol/openid_connect/token" | grep -q "access_token"; then
    echo "‚úÖ Login admin funcionando"
else
    echo "‚ö†Ô∏è Problema no login admin"
fi

echo ""
echo "üéâ CONFIGURA√á√ÉO CONCLU√çDA!"
echo "=========================="
echo "üîê Keycloak: $KEYCLOAK_URL"
echo "üë§ Admin: $KEYCLOAK_ADMIN_USER / $KEYCLOAK_ADMIN_PASSWORD"
echo "üè¢ Realm: KRYONIX"
echo "üì± Clients: Frontend, Mobile"
echo ""
echo "üåê URLs importantes:"
echo "   Admin Console: $KEYCLOAK_URL/admin"
echo "   Realm KRYONIX: $KEYCLOAK_URL/realms/KRYONIX"
echo ""
echo "‚úÖ Keycloak est√° pronto para uso!"
