#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ KRYONIX - Build Ultra-R√°pido Iniciado');

// Otimiza√ß√µes de ambiente para build mais r√°pido
process.env.NEXT_TELEMETRY_DISABLED = '1';
process.env.NODE_ENV = 'production';
process.env.NODE_OPTIONS = '--max-old-space-size=4096';

// Configura√ß√µes para build mais r√°pido
const buildConfig = {
  // Disable verifica√ß√µes demoradas
  skipTypeCheck: true,
  skipLint: true,
  skipSourceMaps: true,
  // Otimiza√ß√µes de webpack
  minify: false, // Disable minifica√ß√£o para build mais r√°pido
  compress: false,
};

console.log('‚ö° Configura√ß√µes de build otimizadas aplicadas');

try {
  // 1. Limpar cache anterior se existe
  if (fs.existsSync('.next')) {
    console.log('üßπ Limpando cache anterior...');
    execSync('rm -rf .next', { stdio: 'inherit' });
  }

  // 2. Build Next.js com otimiza√ß√µes m√°ximas
  console.log('üî® Executando build Next.js ultra-r√°pido...');
  
  const buildCommand = [
    'npx next build',
    '--no-lint',
    '--experimental-build-mode=compile',
  ].join(' ');

  const startTime = Date.now();
  execSync(buildCommand, { 
    stdio: 'inherit',
    env: {
      ...process.env,
      NEXT_TELEMETRY_DISABLED: '1',
      NODE_ENV: 'production',
      // Desabilitar an√°lises demoradas
      ANALYZE: 'false',
      // Webpack optimizations
      WEBPACK_DISABLE_SOURCE_MAPS: 'true',
    }
  });
  
  const buildTime = ((Date.now() - startTime) / 1000).toFixed(2);
  console.log(`‚úÖ Build conclu√≠do em ${buildTime}s`);

  // 3. Verificar se build foi bem-sucedido
  if (fs.existsSync('.next/standalone')) {
    console.log('‚úÖ Build standalone criado com sucesso');
  }

  console.log('üéâ Build ultra-r√°pido conclu√≠do com sucesso!');
  
} catch (error) {
  console.error('‚ùå Erro no build ultra-r√°pido:', error.message);
  process.exit(1);
}
