#!/bin/bash

set -euo pipefail

# Configura√ß√µes KRYONIX - FUNCIONAL DO INSTALADOR ANTIGO
STACK_NAME="Kryonix"
DEPLOY_PATH="/opt/kryonix-plataform"
LOG_FILE="/var/log/kryonix-deploy.log"
GITHUB_REPO="https://Nakahh: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@github.com/Nakahh/KRYONIX-PLATAFORMA.git"

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    local message="${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
    echo -e "$message"
    echo -e "$message" >> "$LOG_FILE" 2>/dev/null || echo -e "$message" >> "./deploy.log" 2>/dev/null || true
}

# Auto-update dependencies function - FUNCIONAL DO INSTALADOR ANTIGO
auto_update_dependencies() {
    log "üì¶ Atualizando depend√™ncias automaticamente..."

    # Backup
    cp package.json package.json.backup || true

    # Install npm-check-updates if not exists
    if ! command -v ncu >/dev/null 2>&1; then
        log "üì¶ Instalando npm-check-updates..."
        npm install -g npm-check-updates >/dev/null 2>&1 || true
    fi

    # Update dependencies
    if command -v ncu >/dev/null 2>&1; then
        log "üîÑ Verificando atualiza√ß√µes dispon√≠veis..."
        ncu --upgrade --target minor >/dev/null 2>&1 || true
        log "‚úÖ Depend√™ncias atualizadas para vers√µes compat√≠veis"
    fi

    # Clean and reinstall
    log "üßπ Limpando cache e reinstalando..."
    npm cache clean --force >/dev/null 2>&1 || true
    rm -rf node_modules package-lock.json 2>/dev/null || true

    if npm install --production --no-audit --no-fund; then
        log "‚úÖ Depend√™ncias instaladas com sucesso"
    else
        log "‚ö†Ô∏è Problemas na instala√ß√£o, restaurando backup..."
        cp package.json.backup package.json || true
        npm install --production >/dev/null 2>&1 || true
    fi
}

deploy() {
    log "üöÄ Iniciando deploy autom√°tico KRYONIX com nuclear cleanup..."

    # CORRE√á√ÉO: Nuclear cleanup para garantir vers√£o mais recente
    log "üßπ Nuclear cleanup para garantir vers√£o mais recente..."

    # Parar processos
    sudo pkill -f "$DEPLOY_PATH" 2>/dev/null || true

    # Remover TUDO do diret√≥rio (incluindo .git)
    cd /opt
    sudo rm -rf kryonix-plataform

    log "üì• Clone FRESH da vers√£o mais recente..."

    # Configurar Git e credenciais para reposit√≥rio privado
    git config --global user.name "KRYONIX Deploy" 2>/dev/null || true
    git config --global user.email "deploy@kryonix.com.br" 2>/dev/null || true
    git config --global --add safe.directory "$DEPLOY_PATH" 2>/dev/null || true
    git config --global credential.helper store 2>/dev/null || true

    # Configurar credenciais para reposit√≥rio privado
    echo "https://Nakahh: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@github.com" > ~/.git-credentials
    chmod 600 ~/.git-credentials

    # Clone fresh completo (reposit√≥rio privado)
    if git clone --single-branch --branch main --depth 1 "https://github.com/Nakahh/KRYONIX-PLATAFORMA.git" kryonix-plataform; then
        log "‚úÖ Clone fresh conclu√≠do"
    else
        log "‚ö†Ô∏è Clone com credenciais store falhou, tentando com token na URL..."
        # Fallback: token diretamente na URL
        if git clone --single-branch --branch main --depth 1 "https://Nakahh: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@github.com/Nakahh/KRYONIX-PLATAFORMA.git" kryonix-plataform; then
            log "‚úÖ Clone fresh conclu√≠do com fallback"
        else
            log "‚ùå Falha no clone fresh com todos os m√©todos"
            return 1
        fi
    fi

    cd "$DEPLOY_PATH"

    # Verificar se √© a vers√£o mais recente
    current_commit=$(git rev-parse HEAD 2>/dev/null | head -c 8 || echo "unknown")
    current_msg=$(git log -1 --pretty=format:"%s" 2>/dev/null || echo "N/A")
    remote_commit=$(git ls-remote origin HEAD 2>/dev/null | cut -f1 | head -c 8 || echo "unknown")

    log "üìå Commit local: $current_commit"
    log "üåê Commit remoto: $remote_commit"
    log "üìù Mensagem: $current_msg"

    # Verificar se tem arquivos necess√°rios
    if [ ! -f "webhook-listener.js" ] || [ ! -f "kryonix-monitor.js" ]; then
        log "‚ùå Arquivos de servi√ßos faltando ap√≥s clone!"
        return 1
    fi

    # NOVA FUNCIONALIDADE: Auto-update de depend√™ncias
    auto_update_dependencies

    # Verificar se tem arquivos necess√°rios
    if [ ! -f "package.json" ]; then
        log "‚ùå package.json faltando ap√≥s clone!"
        return 1
    fi

    # Verificar depend√™ncias cr√≠ticas
    log "üîç Verificando depend√™ncias cr√≠ticas..."
    if [ -f "check-dependencies.js" ]; then
        if node check-dependencies.js; then
            log "‚úÖ Verifica√ß√£o de depend√™ncias passou"
        else
            log "‚ö†Ô∏è Problemas nas depend√™ncias, tentando corre√ß√£o..."
            if [ -f "fix-dependencies.js" ]; then
                node fix-dependencies.js || true
            fi
        fi
    fi

    # Instalar depend√™ncias
    log "üì¶ Instalando depend√™ncias..."
    npm install --production

    # Rebuild da imagem
    log "üèóÔ∏è Fazendo rebuild da imagem Docker..."
    docker build --no-cache -t kryonix-plataforma:latest .

    # Deploy do stack
    log "üöÄ Fazendo deploy do stack KRYONIX..."
    docker stack deploy -c docker-stack.yml "$STACK_NAME"

    sleep 60

    # Verificar health de todos os servi√ßos
    log "üîç Verificando health dos servi√ßos KRYONIX..."

    services_ok=0
    total_services=3

    for port in 8080 8082 8084; do
        if curl -f -s "http://localhost:$port/health" > /dev/null; then
            log "‚úÖ Servi√ßo KRYONIX na porta $port funcionando"
            services_ok=$((services_ok + 1))
        else
            log "‚ö†Ô∏è Servi√ßo KRYONIX na porta $port com problemas"
        fi
    done

    if [ $services_ok -eq $total_services ]; then
        log "üéâ Deploy KRYONIX conclu√≠do com SUCESSO! ($services_ok/$total_services servi√ßos OK)"
    else
        log "‚ö†Ô∏è Deploy KRYONIX com problemas ($services_ok/$total_services servi√ßos OK)"
    fi

    # Testar webhook externamente
    if curl -f -s -X POST "https://kryonix.com.br/api/github-webhook" \
       -H "Content-Type: application/json" \
       -d '{"test":true,"ref":"refs/heads/main"}' >/dev/null 2>&1; then
        log "üåê Webhook externo KRYONIX funcionando!"
    else
        log "‚ö†Ô∏è Webhook externo KRYONIX pode ter problemas"
    fi
}

case "${1:-}" in
    "webhook")
        deploy
        ;;
    "manual")
        deploy
        ;;
    *)
        echo "Uso: $0 {webhook|manual}"
        ;;
esac
