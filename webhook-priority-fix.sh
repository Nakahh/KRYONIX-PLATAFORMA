#!/bin/bash

# ==============================================================================
# SCRIPT DE OTIMIZA√á√ÉO - WEBHOOK E PRIORIDADES TRAEFIK
# Vers√£o: 1.0.0 - Corre√ß√£o de prioridades para deploy autom√°tico instant√¢neo
# ==============================================================================

set -e

BLUE='\033[1;34m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
RESET='\033[0m'

echo -e "${BLUE}üîß KRYONIX - Otimiza√ß√£o Webhook e Traefik${RESET}"
echo -e "${YELLOW}=====================================\n${RESET}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Execute este script no diret√≥rio do projeto KRYONIX${RESET}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Aplicando corre√ß√µes de prioridade Traefik...${RESET}"

# 1. Verificar se o stack est√° rodando
if docker service ls | grep -q "Kryonix_web"; then
    echo -e "${YELLOW}üîÑ Aplicando update no servi√ßo para prioridades...${RESET}"
    
    # For√ßar update do servi√ßo com novas configura√ß√µes
    docker service update --force Kryonix_web >/dev/null 2>&1 || {
        echo -e "${YELLOW}‚ö†Ô∏è Update direto falhou, redesployando stack...${RESET}"
        docker stack rm Kryonix >/dev/null 2>&1 || true
        sleep 15
        docker stack deploy -c docker-stack.yml Kryonix
    }
else
    echo -e "${YELLOW}üöÄ Deployando stack com configura√ß√µes otimizadas...${RESET}"
    docker stack deploy -c docker-stack.yml Kryonix
fi

echo -e "${GREEN}‚úÖ Aguardando estabiliza√ß√£o...${RESET}"
sleep 30

# 2. Testar webhook
echo -e "${GREEN}üß™ Testando webhook endpoint...${RESET}"
if curl -f -s -X POST "http://localhost:8080/api/github-webhook" \
   -H "Content-Type: application/json" \
   -d '{"test": true, "ref": "refs/heads/main"}' >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Webhook respondendo corretamente${RESET}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Webhook pode estar inicializando...${RESET}"
fi

# 3. Verificar health
echo -e "${GREEN}üè• Verificando sa√∫de do servi√ßo...${RESET}"
if curl -f -s "http://localhost:8080/health" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Servi√ßo saud√°vel${RESET}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Servi√ßo pode estar inicializando...${RESET}"
fi

# 4. Mostrar status dos servi√ßos
echo -e "\n${BLUE}üìä Status dos servi√ßos:${RESET}"
docker service ls | grep Kryonix || echo -e "${YELLOW}Nenhum servi√ßo KRYONIX encontrado${RESET}"

echo -e "\n${GREEN}üéâ Otimiza√ß√£o conclu√≠da!${RESET}"
echo -e "${BLUE}==========================================\n${RESET}"

echo -e "${GREEN}‚úÖ CORRE√á√ïES APLICADAS:${RESET}"
echo -e "   ‚Ä¢ ${GREEN}API webhook com prioridade 1000${RESET}"
echo -e "   ‚Ä¢ ${GREEN}Suporte HTTP e HTTPS para webhook${RESET}"
echo -e "   ‚Ä¢ ${GREEN}Rede fixa 'kryonix-net'${RESET}"
echo -e "   ‚Ä¢ ${GREEN}Volumes otimizados${RESET}"

echo -e "\n${BLUE}üîó TESTE O WEBHOOK:${RESET}"
echo -e "${YELLOW}curl -X POST http://localhost:8080/api/github-webhook -H 'Content-Type: application/json' -d '{\"ref\":\"refs/heads/main\"}'${RESET}"

echo -e "\n${BLUE}üåê URLs:${RESET}"
echo -e "   ‚Ä¢ Health: ${YELLOW}http://localhost:8080/health${RESET}"
echo -e "   ‚Ä¢ Webhook: ${YELLOW}http://localhost:8080/api/github-webhook${RESET}"
echo -e "   ‚Ä¢ Status: ${YELLOW}http://localhost:8080/api/status${RESET}"

echo -e "\n${GREEN}üöÄ Agora o webhook deve atualizar automaticamente quando voc√™ der push na main!${RESET}"
