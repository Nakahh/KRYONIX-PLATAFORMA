#!/bin/bash
# Script de Configura√ß√£o Autom√°tica Keycloak - Parte 01
# KRYONIX SaaS Platform

echo "üöÄ Iniciando configura√ß√£o autom√°tica do Keycloak..."

# Vari√°veis de configura√ß√£o
KEYCLOAK_URL="https://keycloak.kryonix.com.br"
ADMIN_USER="kryonix"
ADMIN_PASSWORD="Vitor@123456"
REALM_NAME="kryonix"

# Aguardar Keycloak ficar dispon√≠vel
echo "‚è≥ Aguardando Keycloak ficar dispon√≠vel..."
timeout 300 bash -c "until curl -f $KEYCLOAK_URL/health; do sleep 5; done"

if [ $? -eq 0 ]; then
    echo "‚úÖ Keycloak est√° dispon√≠vel!"
else
    echo "‚ùå Timeout: Keycloak n√£o respondeu em 5 minutos"
    exit 1
fi

# Obter token de acesso admin
echo "üîê Obtendo token de acesso..."
TOKEN_RESPONSE=$(curl -s -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "username=$ADMIN_USER" \
  -d "password=$ADMIN_PASSWORD" \
  -d "grant_type=password" \
  -d "client_id=admin-cli")

ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')

if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
    echo "‚ùå Erro ao obter token de acesso"
    echo "Resposta: $TOKEN_RESPONSE"
    exit 1
fi

echo "‚úÖ Token obtido com sucesso!"

# Criar realm KRYONIX
echo "üè∞ Criando realm KRYONIX..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "realm": "'$REALM_NAME'",
    "displayName": "KRYONIX SaaS Platform",
    "enabled": true,
    "registrationAllowed": true,
    "loginWithEmailAllowed": true,
    "duplicateEmailsAllowed": false,
    "resetPasswordAllowed": true,
    "editUsernameAllowed": false,
    "bruteForceProtected": true,
    "rememberMe": true,
    "verifyEmail": false,
    "loginTheme": "kryonix",
    "internationalizationEnabled": true,
    "supportedLocales": ["pt-BR", "en"],
    "defaultLocale": "pt-BR"
  }'

echo "‚úÖ Realm KRYONIX criado!"

# Configurar cliente para aplica√ß√£o frontend
echo "üñ•Ô∏è Configurando cliente frontend..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "clientId": "kryonix-frontend",
    "name": "KRYONIX Frontend Application",
    "enabled": true,
    "publicClient": true,
    "protocol": "openid-connect",
    "redirectUris": [
      "https://app.kryonix.com.br/*",
      "https://admin.kryonix.com.br/*",
      "https://www.kryonix.com.br/*"
    ],
    "webOrigins": [
      "https://app.kryonix.com.br",
      "https://admin.kryonix.com.br", 
      "https://www.kryonix.com.br"
    ],
    "attributes": {
      "pkce.code.challenge.method": "S256"
    }
  }'

echo "‚úÖ Cliente frontend configurado!"

# Configurar cliente para aplica√ß√£o backend
echo "üîß Configurando cliente backend..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/clients" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "clientId": "kryonix-backend",
    "name": "KRYONIX Backend API",
    "enabled": true,
    "publicClient": false,
    "protocol": "openid-connect",
    "serviceAccountsEnabled": true,
    "authorizationServicesEnabled": true
  }'

echo "‚úÖ Cliente backend configurado!"

# Configurar identity provider do Google
echo "üîµ Configurando login com Google..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/identity-provider/instances" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "alias": "google",
    "providerId": "google",
    "enabled": true,
    "config": {
      "clientId": "GOOGLE_CLIENT_ID_PLACEHOLDER",
      "clientSecret": "GOOGLE_CLIENT_SECRET_PLACEHOLDER",
      "syncMode": "IMPORT"
    }
  }'

echo "‚ö†Ô∏è Google OAuth configurado (necess√°rio adicionar credenciais reais)"

# Configurar identity provider do GitHub
echo "üêô Configurando login com GitHub..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/identity-provider/instances" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "alias": "github",
    "providerId": "github",
    "enabled": true,
    "config": {
      "clientId": "GITHUB_CLIENT_ID_PLACEHOLDER",
      "clientSecret": "GITHUB_CLIENT_SECRET_PLACEHOLDER",
      "syncMode": "IMPORT"
    }
  }'

echo "‚ö†Ô∏è GitHub OAuth configurado (necess√°rio adicionar credenciais reais)"

# Criar usu√°rio administrador padr√£o
echo "üë§ Criando usu√°rio administrador..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/users" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "admin",
    "email": "admin@kryonix.com.br",
    "firstName": "Administrador",
    "lastName": "KRYONIX",
    "enabled": true,
    "emailVerified": true,
    "credentials": [{
      "type": "password",
      "value": "Vitor@123456",
      "temporary": false
    }]
  }'

echo "‚úÖ Usu√°rio administrador criado!"

# Configurar roles
echo "üõ°Ô∏è Configurando roles..."
curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/roles" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "admin",
    "description": "Administrador completo da plataforma"
  }'

curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/roles" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "user",
    "description": "Usu√°rio padr√£o da plataforma"
  }'

curl -s -X POST "$KEYCLOAK_URL/admin/realms/$REALM_NAME/roles" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "manager",
    "description": "Gerente com permiss√µes intermedi√°rias"
  }'

echo "‚úÖ Roles configurados!"

# Testar configura√ß√£o
echo "üß™ Testando configura√ß√£o..."
TEST_RESPONSE=$(curl -s "$KEYCLOAK_URL/realms/$REALM_NAME/.well-known/openid-configuration")
ISSUER=$(echo $TEST_RESPONSE | jq -r '.issuer')

if [ "$ISSUER" = "$KEYCLOAK_URL/realms/$REALM_NAME" ]; then
    echo "‚úÖ Teste de configura√ß√£o passou!"
else
    echo "‚ùå Erro no teste de configura√ß√£o"
    exit 1
fi

# Notificar conclus√£o via WhatsApp
echo "üì± Enviando notifica√ß√£o WhatsApp..."
curl -s -X POST "https://api.kryonix.com.br/send-message" \
  -H "Authorization: Bearer $EVOLUTION_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "number": "5517981805327",
    "message": "‚úÖ PARTE 1 CONCLU√çDA!\n\nüîê Sistema de Autentica√ß√£o ATIVO\nüåê URL: https://keycloak.kryonix.com.br\nüë§ Login funcionando\nüìä Progresso: 2% (1 de 50 partes)\n\n‚û°Ô∏è Pr√≥xima: Parte 2 - Base de Dados"
  }'

echo ""
echo "üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo ""
echo "üìã Resumo:"
echo "  üåê Keycloak: $KEYCLOAK_URL"
echo "  üè∞ Realm: $REALM_NAME"  
echo "  üë§ Admin: admin@kryonix.com.br / Vitor@123456"
echo "  üîµ Google OAuth: Configurado (credenciais necess√°rias)"
echo "  üêô GitHub OAuth: Configurado (credenciais necess√°rias)"
echo ""
echo "‚û°Ô∏è Pr√≥ximo passo: Parte 2 - Base de Dados PostgreSQL"
