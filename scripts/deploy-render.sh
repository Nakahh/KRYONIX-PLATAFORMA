#!/bin/bash

# KRYONIX Render Deployment Script
set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if Render CLI is installed
check_render_cli() {
    if ! command -v render &> /dev/null; then
        error "Render CLI not found. Installing..."
        
        if [[ "$OSTYPE" == "darwin"* ]]; then
            if command -v brew &> /dev/null; then
                brew install render
            else
                error "Homebrew not found. Install Render CLI manually: https://docs.render.com/cli"
                exit 1
            fi
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            curl -s https://api.github.com/repos/render-oss/render-cli/releases/latest \
                | grep "browser_download_url.*linux_amd64" \
                | cut -d '"' -f 4 \
                | wget -qi - -O render-cli.tar.gz
            tar -xzf render-cli.tar.gz
            sudo mv render /usr/local/bin/
            rm render-cli.tar.gz
        else
            error "Unsupported OS. Install Render CLI manually."
            exit 1
        fi
        
        success "Render CLI installed"
    else
        success "Render CLI found"
    fi
}

# Deploy to Render
deploy_to_render() {
    log "Starting KRYONIX backend deployment to Render..."
    
    # Check if in git repository
    if [ ! -d ".git" ]; then
        info "Not a git repository. Initializing..."
        git init
        git add .
        git commit -m "Initial commit for Render deployment"
    fi
    
    # Check if render.yaml exists
    if [ ! -f "render.yaml" ]; then
        error "render.yaml not found. Make sure you have the render.yaml configuration file."
        exit 1
    fi
    
    # Deploy using render.yaml
    info "Deploying using render.yaml configuration..."
    render deploy
    
    success "Deployment initiated! Check Render dashboard for progress."
}

# Setup GitHub webhook
setup_github_webhook() {
    log "Setting up GitHub webhook..."
    
    # Get service URL (this would need to be retrieved from Render API or dashboard)
    SERVICE_URL="https://kryonix-backend.onrender.com"
    WEBHOOK_URL="${SERVICE_URL}/api/github-webhook"
    
    info "GitHub Webhook Configuration:"
    echo ""
    echo -e "${YELLOW}📋 WEBHOOK SETUP INSTRUCTIONS:${NC}"
    echo "1. Go to your GitHub repository: https://github.com/Nakahh/KRYONIX-PLATAFORMA"
    echo "2. Navigate to Settings > Webhooks"
    echo "3. Click 'Add webhook'"
    echo "4. Enter the following details:"
    echo "   - Payload URL: $WEBHOOK_URL"
    echo "   - Content type: application/json"
    echo "   - Secret: (copy from Render environment variables)"
    echo "   - Events: Select 'push' and 'pull request'"
    echo "5. Click 'Add webhook'"
    echo ""
    
    success "Webhook setup instructions provided"
}

# Configure environment variables
configure_env_vars() {
    log "Environment Variables Configuration..."
    
    echo ""
    echo -e "${YELLOW}🔐 REQUIRED ENVIRONMENT VARIABLES:${NC}"
    echo ""
    echo "Configure these in your Render dashboard:"
    echo ""
    echo "Basic Configuration:"
    echo "  NODE_ENV=production"
    echo "  PORT=8080"
    echo "  HOSTNAME=0.0.0.0"
    echo ""
    echo "Security (auto-generated by Render):"
    echo "  WEBHOOK_SECRET=(generate value)"
    echo "  JWT_SECRET=(generate value)"
    echo "  ENCRYPTION_KEY=(generate value)"
    echo "  SESSION_SECRET=(generate value)"
    echo ""
    echo "CORS Configuration:"
    echo "  CORS_ORIGINS=https://kryonix-frontend.vercel.app,https://kryonix.com.br"
    echo ""
    echo "External Services:"
    echo "  EVOLUTION_API_URL=https://api.kryonix.com.br"
    echo "  EVOLUTION_API_KEY=(your-evolution-api-key)"
    echo "  WHATSAPP_WEBHOOK_URL=https://kryonix-backend.onrender.com/api/whatsapp-webhook"
    echo "  ALERT_WHATSAPP=+5517981805327"
    echo ""
    echo "Email Configuration:"
    echo "  SMTP_HOST=smtp.gmail.com"
    echo "  SMTP_PORT=587"
    echo "  SMTP_USER=(your-email@gmail.com)"
    echo "  SMTP_PASS=(your-app-password)"
    echo ""
    
    success "Environment variables guide provided"
}

# Main deployment function
main() {
    echo ""
    echo -e "${PURPLE}╔══════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║      KRYONIX RENDER DEPLOYMENT v2.0     ║${NC}"
    echo -e "${PURPLE}║    Complete Backend Deployment Tool     ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════╝${NC}"
    echo ""
    
    # Check prerequisites
    check_render_cli
    
    # Confirm deployment
    read -p "Deploy KRYONIX backend to Render? (Y/n): " confirm
    
    if [[ ! $confirm =~ ^[Nn]$ ]]; then
        deploy_to_render
        
        # Wait a moment for deployment to start
        sleep 10
        
        # Show configuration instructions
        configure_env_vars
        setup_github_webhook
        
        success "🎉 KRYONIX backend deployment completed!"
        info "📊 Monitor at: https://dashboard.render.com"
        info "🔗 Backend URL: https://kryonix-backend.onrender.com"
        info "💚 Health Check: https://kryonix-backend.onrender.com/health"
        
        # Show final instructions
        echo ""
        echo -e "${YELLOW}📋 NEXT STEPS:${NC}"
        echo "1. Configure environment variables in Render dashboard"
        echo "2. Set up GitHub webhook for auto-deployment"
        echo "3. Configure external services (Evolution API, etc.)"
        echo "4. Test all endpoints and functionality"
        echo "5. Monitor logs for any issues"
        
    else
        info "Deployment cancelled."
    fi
}

# Run main function
main "$@"
