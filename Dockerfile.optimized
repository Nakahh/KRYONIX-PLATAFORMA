# KRYONIX Platform - Dockerfile Otimizado
# Este Dockerfile resolve problemas de TypeScript e acelera o build

FROM node:18-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat curl bash dumb-init

# Configurar diretório de trabalho
WORKDIR /app

# Copiar apenas package.json primeiro para otimizar cache
COPY package.json package-lock.json* ./

# Instalar dependências com otimizações
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV CI=1
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Estágio de build
FROM base AS builder

# Copiar dependências de produção
COPY --from=base /app/node_modules ./node_modules

# Copiar arquivos de configuração primeiro
COPY package.json package-lock.json* ./
COPY next.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY tsconfig.json ./

# Copiar scripts de correção
COPY fix-typescript-build.js ./
COPY build-fast.js ./
COPY check-dependencies.js ./
COPY validate-dependencies.js ./
COPY fix-dependencies.js ./

# Copiar código fonte
COPY app/ ./app/
COPY public/ ./public/
COPY lib/ ./lib/
COPY server.js ./
COPY webhook-listener.js ./
COPY kryonix-monitor.js ./
COPY webhook-deploy.sh ./

# Aplicar correções de TypeScript automaticamente
RUN node fix-typescript-build.js || echo "⚠️ Correções já aplicadas"

# Build otimizado com configurações especiais
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Executar build com script otimizado
RUN npm run build-fast

# Estágio de produção
FROM node:18-alpine AS runner

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Instalar utilitários necessários
RUN apk add --no-cache curl bash dumb-init

WORKDIR /app

# Copiar arquivos necessários para execução
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/server.js ./
COPY --from=builder /app/webhook-listener.js ./
COPY --from=builder /app/kryonix-monitor.js ./
COPY --from=builder /app/package.json ./

# Configurar usuário
USER nextjs

# Expor portas
EXPOSE 3000 3001 3002

# Variáveis de ambiente
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Health checks
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Comando de inicialização
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
