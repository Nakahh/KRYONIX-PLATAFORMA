#!/bin/bash

# üíæ KRYONIX - Sistema de Backup Autom√°tico Inteligente
# Backup completo com valida√ß√£o, compress√£o e notifica√ß√µes WhatsApp
# Sistema aut√¥nomo com recupera√ß√£o autom√°tica

set -euo pipefail

# Configura√ß√µes do backup
BACKUP_DIR="/backup/kryonix"
PROJECT_DIR="/opt/kryonix-plataform"
LOG_FILE="/var/log/kryonix-backup.log"
RETENTION_DAYS=30
MAX_BACKUP_SIZE="10G"

# Configura√ß√µes de notifica√ß√£o
ADMIN_PHONE="5517981805327"
EVOLUTION_API_URL="https://api.kryonix.com.br"
EVOLUTION_API_KEY="2f4d6967043b87b5ebee57b872e0223a"
INSTANCE_NAME="kryonix-monitor"

# Configura√ß√µes do banco de dados
DB_CONTAINER="keycloak-postgres"
DB_USER="keycloak"
DB_NAME="keycloak"
DB_PASSWORD="Kr7\$n0x-2025-K3ycl04k-DB-P4ssw0rd"

# Cores para logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o de log com timestamp
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local color=""
    
    case $level in
        "INFO")  color="$CYAN" ;;
        "SUCCESS") color="$GREEN" ;;
        "WARNING") color="$YELLOW" ;;
        "ERROR") color="$RED" ;;
        "DEBUG") color="$PURPLE" ;;
    esac
    
    echo -e "${color}[$timestamp] [$level]${NC} $message" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para enviar notifica√ß√£o WhatsApp
send_whatsapp_notification() {
    local message="$1"
    local priority="${2:-normal}"
    
    local emoji=""
    case $priority in
        "success") emoji="‚úÖ" ;;
        "warning") emoji="‚ö†Ô∏è" ;;
        "error") emoji="‚ùå" ;;
        "info") emoji="‚ÑπÔ∏è" ;;
        *) emoji="üì±" ;;
    esac
    
    local formatted_message="${emoji} *KRYONIX Backup*\n\n${message}\n\n_Sistema autom√°tico de backup_"
    
    curl -s -X POST "$EVOLUTION_API_URL/message/sendText/$INSTANCE_NAME" \
        -H "Content-Type: application/json" \
        -H "apikey: $EVOLUTION_API_KEY" \
        -d "{
            \"number\": \"${ADMIN_PHONE}@s.whatsapp.net\",
            \"text\": \"$formatted_message\"
        }" >/dev/null 2>&1 || true
}

# Fun√ß√£o para verificar espa√ßo em disco
check_disk_space() {
    log "INFO" "Verificando espa√ßo em disco dispon√≠vel..."
    
    local available_space=$(df -BG "$BACKUP_DIR" | awk 'NR==2 {print $4}' | sed 's/G//')
    local required_space=15 # GB m√≠nimo necess√°rio
    
    if [ "$available_space" -lt "$required_space" ]; then
        log "ERROR" "Espa√ßo insuficiente: ${available_space}GB dispon√≠vel, ${required_space}GB necess√°rio"
        send_whatsapp_notification "‚ùå *Backup Falhou*\n\nEspa√ßo insuficiente no disco:\n‚Ä¢ Dispon√≠vel: ${available_space}GB\n‚Ä¢ Necess√°rio: ${required_space}GB\n\nA√ß√£o necess√°ria: Liberar espa√ßo em disco" "error"
        return 1
    fi
    
    log "SUCCESS" "Espa√ßo em disco OK: ${available_space}GB dispon√≠vel"
    return 0
}

# Fun√ß√£o para criar estrutura de diret√≥rios
create_backup_structure() {
    local backup_date="$1"
    local backup_path="$BACKUP_DIR/$backup_date"
    
    log "INFO" "Criando estrutura de backup: $backup_path"
    
    mkdir -p "$backup_path"/{database,application,config,logs,docker}
    
    if [ ! -d "$backup_path" ]; then
        log "ERROR" "Falha ao criar diret√≥rio de backup: $backup_path"
        return 1
    fi
    
    echo "$backup_path"
}

# Fun√ß√£o para backup do banco de dados
backup_database() {
    local backup_path="$1"
    
    log "INFO" "Iniciando backup do banco de dados Keycloak..."
    
    # Verificar se container existe
    if ! docker ps -a --format "{{.Names}}" | grep -q "^${DB_CONTAINER}$"; then
        log "WARNING" "Container do banco de dados n√£o encontrado: $DB_CONTAINER"
        return 1
    fi
    
    # Backup do PostgreSQL
    local db_backup_file="$backup_path/database/keycloak_$(date +%Y%m%d_%H%M%S).sql"
    
    if docker exec "$DB_CONTAINER" pg_dump -U "$DB_USER" -d "$DB_NAME" > "$db_backup_file"; then
        
        # Comprimir backup
        gzip "$db_backup_file"
        db_backup_file="${db_backup_file}.gz"
        
        # Verificar integridade
        if [ -f "$db_backup_file" ] && [ -s "$db_backup_file" ]; then
            local file_size=$(du -h "$db_backup_file" | awk '{print $1}')
            log "SUCCESS" "Backup do banco conclu√≠do: $file_size"
            
            # Testar integridade do arquivo comprimido
            if gzip -t "$db_backup_file" >/dev/null 2>&1; then
                log "SUCCESS" "Integridade do backup do banco validada"
                echo "$db_backup_file"
                return 0
            else
                log "ERROR" "Arquivo de backup do banco corrompido"
                return 1
            fi
        else
            log "ERROR" "Arquivo de backup do banco vazio ou n√£o criado"
            return 1
        fi
    else
        log "ERROR" "Falha no backup do banco de dados"
        return 1
    fi
}

# Fun√ß√£o para backup da aplica√ß√£o
backup_application() {
    local backup_path="$1"
    
    log "INFO" "Iniciando backup da aplica√ß√£o..."
    
    if [ ! -d "$PROJECT_DIR" ]; then
        log "ERROR" "Diret√≥rio da aplica√ß√£o n√£o encontrado: $PROJECT_DIR"
        return 1
    fi
    
    local app_backup_file="$backup_path/application/kryonix-app_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Criar backup excluindo node_modules e .git
    if tar -czf "$app_backup_file" \
        -C "$(dirname $PROJECT_DIR)" \
        --exclude="node_modules" \
        --exclude=".git" \
        --exclude="*.log" \
        --exclude="tmp" \
        "$(basename $PROJECT_DIR)"; then
        
        if [ -f "$app_backup_file" ] && [ -s "$app_backup_file" ]; then
            local file_size=$(du -h "$app_backup_file" | awk '{print $1}')
            log "SUCCESS" "Backup da aplica√ß√£o conclu√≠do: $file_size"
            
            # Testar integridade do arquivo
            if tar -tzf "$app_backup_file" >/dev/null 2>&1; then
                log "SUCCESS" "Integridade do backup da aplica√ß√£o validada"
                echo "$app_backup_file"
                return 0
            else
                log "ERROR" "Arquivo de backup da aplica√ß√£o corrompido"
                return 1
            fi
        else
            log "ERROR" "Arquivo de backup da aplica√ß√£o vazio ou n√£o criado"
            return 1
        fi
    else
        log "ERROR" "Falha no backup da aplica√ß√£o"
        return 1
    fi
}

# Fun√ß√£o para backup das configura√ß√µes
backup_configurations() {
    local backup_path="$1"
    
    log "INFO" "Iniciando backup das configura√ß√µes..."
    
    local config_backup_file="$backup_path/config/kryonix-config_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Lista de diret√≥rios e arquivos de configura√ß√£o
    local config_items=(
        "/etc/docker"
        "/etc/nginx"
        "/etc/ssl"
        "/etc/systemd/system/kryonix*"
        "/var/lib/docker/volumes"
        "$PROJECT_DIR/keycloak-config.json"
        "$PROJECT_DIR/docker-stack.yml"
        "$PROJECT_DIR/.env"
    )
    
    # Criar lista de itens existentes
    local existing_items=()
    for item in "${config_items[@]}"; do
        if [ -e "$item" ]; then
            existing_items+=("$item")
        fi
    done
    
    if [ ${#existing_items[@]} -eq 0 ]; then
        log "WARNING" "Nenhum arquivo de configura√ß√£o encontrado para backup"
        return 1
    fi
    
    if tar -czf "$config_backup_file" "${existing_items[@]}" 2>/dev/null; then
        if [ -f "$config_backup_file" ] && [ -s "$config_backup_file" ]; then
            local file_size=$(du -h "$config_backup_file" | awk '{print $1}')
            log "SUCCESS" "Backup das configura√ß√µes conclu√≠do: $file_size"
            echo "$config_backup_file"
            return 0
        fi
    fi
    
    log "WARNING" "Backup das configura√ß√µes com problemas"
    return 1
}

# Fun√ß√£o para backup dos logs
backup_logs() {
    local backup_path="$1"
    
    log "INFO" "Iniciando backup dos logs..."
    
    local logs_backup_file="$backup_path/logs/kryonix-logs_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Lista de diret√≥rios de logs
    local log_dirs=(
        "/var/log"
        "$PROJECT_DIR/logs"
    )
    
    local existing_logs=()
    for log_dir in "${log_dirs[@]}"; do
        if [ -d "$log_dir" ]; then
            existing_logs+=("$log_dir")
        fi
    done
    
    if [ ${#existing_logs[@]} -eq 0 ]; then
        log "WARNING" "Nenhum diret√≥rio de logs encontrado"
        return 1
    fi
    
    # Backup apenas dos √∫ltimos 7 dias
    if find "${existing_logs[@]}" -name "*.log" -mtime -7 -exec tar -czf "$logs_backup_file" {} + 2>/dev/null; then
        if [ -f "$logs_backup_file" ] && [ -s "$logs_backup_file" ]; then
            local file_size=$(du -h "$logs_backup_file" | awk '{print $1}')
            log "SUCCESS" "Backup dos logs conclu√≠do: $file_size"
            echo "$logs_backup_file"
            return 0
        fi
    fi
    
    log "WARNING" "Backup dos logs com problemas"
    return 1
}

# Fun√ß√£o para backup das configura√ß√µes Docker
backup_docker() {
    local backup_path="$1"
    
    log "INFO" "Iniciando backup das configura√ß√µes Docker..."
    
    local docker_backup_file="$backup_path/docker/docker-info_$(date +%Y%m%d_%H%M%S).json"
    
    # Coletar informa√ß√µes dos containers e servi√ßos
    {
        echo "=== DOCKER SYSTEM INFO ==="
        docker system df
        echo ""
        
        echo "=== DOCKER IMAGES ==="
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"
        echo ""
        
        echo "=== DOCKER CONTAINERS ==="
        docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        echo ""
        
        echo "=== DOCKER NETWORKS ==="
        docker network ls
        echo ""
        
        echo "=== DOCKER VOLUMES ==="
        docker volume ls
        echo ""
        
        echo "=== DOCKER SERVICES ==="
        docker service ls 2>/dev/null || echo "Swarm n√£o ativo"
        echo ""
        
        echo "=== DOCKER STACKS ==="
        docker stack ls 2>/dev/null || echo "Nenhum stack encontrado"
        
    } > "$docker_backup_file"
    
    if [ -f "$docker_backup_file" ] && [ -s "$docker_backup_file" ]; then
        local file_size=$(du -h "$docker_backup_file" | awk '{print $1}')
        log "SUCCESS" "Backup das configura√ß√µes Docker conclu√≠do: $file_size"
        echo "$docker_backup_file"
        return 0
    else
        log "WARNING" "Backup das configura√ß√µes Docker com problemas"
        return 1
    fi
}

# Fun√ß√£o para verificar integridade dos backups
verify_backup_integrity() {
    local backup_path="$1"
    
    log "INFO" "Verificando integridade dos backups..."
    
    local errors=0
    local warnings=0
    
    # Verificar arquivos de backup
    find "$backup_path" -name "*.tar.gz" -o -name "*.gz" | while read -r file; do
        if [ -f "$file" ]; then
            if [[ "$file" == *.tar.gz ]]; then
                if ! tar -tzf "$file" >/dev/null 2>&1; then
                    log "ERROR" "Arquivo corrompido: $file"
                    ((errors++))
                else
                    log "DEBUG" "Arquivo OK: $(basename "$file")"
                fi
            elif [[ "$file" == *.gz ]]; then
                if ! gzip -t "$file" >/dev/null 2>&1; then
                    log "ERROR" "Arquivo corrompido: $file"
                    ((errors++))
                else
                    log "DEBUG" "Arquivo OK: $(basename "$file")"
                fi
            fi
        fi
    done
    
    # Verificar tamanhos m√≠nimos
    local total_size=$(du -sb "$backup_path" | awk '{print $1}')
    local min_size=$((1024 * 1024 * 10)) # 10MB m√≠nimo
    
    if [ "$total_size" -lt "$min_size" ]; then
        log "WARNING" "Backup muito pequeno: $(du -h "$backup_path" | awk '{print $1}')"
        ((warnings++))
    fi
    
    log "INFO" "Verifica√ß√£o conclu√≠da: $errors erros, $warnings avisos"
    return $((errors + warnings))
}

# Fun√ß√£o para limpar backups antigos
cleanup_old_backups() {
    log "INFO" "Limpando backups antigos (>${RETENTION_DAYS} dias)..."
    
    local deleted_count=0
    local freed_space=0
    
    find "$BACKUP_DIR" -maxdepth 1 -type d -mtime +$RETENTION_DAYS | while read -r old_backup; do
        if [ -d "$old_backup" ] && [[ "$(basename "$old_backup")" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}_ ]]; then
            local backup_size=$(du -sb "$old_backup" | awk '{print $1}')
            log "INFO" "Removendo backup antigo: $(basename "$old_backup")"
            
            if rm -rf "$old_backup"; then
                ((deleted_count++))
                ((freed_space += backup_size))
                log "SUCCESS" "Backup removido: $(basename "$old_backup")"
            else
                log "ERROR" "Falha ao remover: $(basename "$old_backup")"
            fi
        fi
    done
    
    if [ $deleted_count -gt 0 ]; then
        local freed_mb=$((freed_space / 1024 / 1024))
        log "SUCCESS" "Limpeza conclu√≠da: $deleted_count backups removidos, ${freed_mb}MB liberados"
    else
        log "INFO" "Nenhum backup antigo para remover"
    fi
}

# Fun√ß√£o para criar relat√≥rio de backup
create_backup_report() {
    local backup_path="$1"
    local start_time="$2"
    local end_time="$3"
    local status="$4"
    
    local report_file="$backup_path/backup-report.txt"
    local duration=$(($end_time - $start_time))
    local duration_formatted=$(printf "%02d:%02d:%02d" $((duration/3600)) $((duration%3600/60)) $((duration%60)))
    
    {
        echo "KRYONIX - Relat√≥rio de Backup"
        echo "=============================="
        echo ""
        echo "Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "Status: $status"
        echo "Dura√ß√£o: $duration_formatted"
        echo "Diret√≥rio: $backup_path"
        echo ""
        echo "Arquivos de Backup:"
        echo "==================="
        
        find "$backup_path" -name "*.tar.gz" -o -name "*.gz" -o -name "*.json" | while read -r file; do
            if [ -f "$file" ]; then
                local size=$(du -h "$file" | awk '{print $1}')
                local rel_path=${file#$backup_path/}
                echo "  $rel_path ($size)"
            fi
        done
        
        echo ""
        echo "Tamanho Total:"
        echo "=============="
        du -sh "$backup_path"
        
        echo ""
        echo "Verifica√ß√£o de Integridade:"
        echo "=========================="
        echo "Todos os arquivos foram verificados para integridade"
        
    } > "$report_file"
    
    log "SUCCESS" "Relat√≥rio de backup criado: $report_file"
}

# Fun√ß√£o para enviar relat√≥rio detalhado via WhatsApp
send_backup_summary() {
    local backup_path="$1"
    local status="$2"
    local duration="$3"
    
    local total_size=$(du -sh "$backup_path" 2>/dev/null | awk '{print $1}' || echo "N/A")
    local file_count=$(find "$backup_path" -type f | wc -l)
    
    local summary=""
    case $status in
        "SUCCESS")
            summary="‚úÖ *Backup Conclu√≠do com Sucesso*\n\n"
            summary+="üìä **Resumo:**\n"
            summary+="‚Ä¢ Dura√ß√£o: $duration\n"
            summary+="‚Ä¢ Tamanho: $total_size\n"
            summary+="‚Ä¢ Arquivos: $file_count\n"
            summary+="‚Ä¢ Local: $(basename "$backup_path")\n\n"
            summary+="üîç **Componentes:**\n"
            summary+="‚Ä¢ ‚úÖ Banco de dados Keycloak\n"
            summary+="‚Ä¢ ‚úÖ Aplica√ß√£o KRYONIX\n"
            summary+="‚Ä¢ ‚úÖ Configura√ß√µes do sistema\n"
            summary+="‚Ä¢ ‚úÖ Logs e monitoramento\n"
            summary+="‚Ä¢ ‚úÖ Informa√ß√µes Docker\n\n"
            summary+="üõ°Ô∏è **Seguran√ßa:**\n"
            summary+="‚Ä¢ Integridade verificada\n"
            summary+="‚Ä¢ Compress√£o aplicada\n"
            summary+="‚Ä¢ Backup validado\n\n"
            summary+="üìÖ Pr√≥ximo backup: $(date -d 'tomorrow' '+%d/%m/%Y √†s %H:%M')"
            send_whatsapp_notification "$summary" "success"
            ;;
        "PARTIAL")
            summary="‚ö†Ô∏è *Backup Parcialmente Conclu√≠do*\n\n"
            summary+="üìä **Resumo:**\n"
            summary+="‚Ä¢ Dura√ß√£o: $duration\n"
            summary+="‚Ä¢ Tamanho: $total_size\n"
            summary+="‚Ä¢ Arquivos: $file_count\n\n"
            summary+="‚ö†Ô∏è **Aten√ß√£o:** Alguns componentes falharam\n"
            summary+="Verificar logs para detalhes\n\n"
            summary+="üìã **A√ß√£o Recomendada:**\n"
            summary+="‚Ä¢ Revisar logs de backup\n"
            summary+="‚Ä¢ Executar backup manual se necess√°rio"
            send_whatsapp_notification "$summary" "warning"
            ;;
        "FAILED")
            summary="‚ùå *Backup Falhou*\n\n"
            summary+="‚ö†Ô∏è **Problema Cr√≠tico Detectado**\n\n"
            summary+="üîç **Poss√≠veis Causas:**\n"
            summary+="‚Ä¢ Espa√ßo em disco insuficiente\n"
            summary+="‚Ä¢ Falha nos servi√ßos Docker\n"
            summary+="‚Ä¢ Problemas de permiss√£o\n"
            summary+="‚Ä¢ Falha na conex√£o com banco\n\n"
            summary+="üö® **A√ß√£o Urgente Necess√°ria:**\n"
            summary+="‚Ä¢ Verificar logs: tail -f $LOG_FILE\n"
            summary+="‚Ä¢ Corrigir problemas identificados\n"
            summary+="‚Ä¢ Executar backup manual\n\n"
            summary+="‚è∞ **Status:** Sistema sem backup v√°lido"
            send_whatsapp_notification "$summary" "error"
            ;;
    esac
}

# Fun√ß√£o principal de backup
main_backup() {
    local start_time=$(date +%s)
    local backup_date=$(date '+%Y-%m-%d_%H%M%S')
    local status="FAILED"
    local success_count=0
    local total_components=5
    
    log "INFO" "=== INICIANDO BACKUP AUTOM√ÅTICO KRYONIX ==="
    log "INFO" "Data/Hora: $(date '+%Y-%m-%d %H:%M:%S')"
    log "INFO" "Backup ID: $backup_date"
    
    # Verificar pr√©-requisitos
    if ! check_disk_space; then
        log "ERROR" "Pr√©-requisitos n√£o atendidos - cancelando backup"
        return 1
    fi
    
    # Criar estrutura de backup
    local backup_path
    if ! backup_path=$(create_backup_structure "$backup_date"); then
        log "ERROR" "Falha ao criar estrutura de backup"
        return 1
    fi
    
    log "INFO" "Diret√≥rio de backup: $backup_path"
    
    # Executar componentes do backup
    log "INFO" "Iniciando backup dos componentes..."
    
    # 1. Backup do banco de dados
    if backup_database "$backup_path"; then
        ((success_count++))
    fi
    
    # 2. Backup da aplica√ß√£o
    if backup_application "$backup_path"; then
        ((success_count++))
    fi
    
    # 3. Backup das configura√ß√µes
    if backup_configurations "$backup_path"; then
        ((success_count++))
    fi
    
    # 4. Backup dos logs
    if backup_logs "$backup_path"; then
        ((success_count++))
    fi
    
    # 5. Backup das configura√ß√µes Docker
    if backup_docker "$backup_path"; then
        ((success_count++))
    fi
    
    # Verificar integridade
    log "INFO" "Verificando integridade dos backups..."
    if verify_backup_integrity "$backup_path"; then
        log "SUCCESS" "Integridade dos backups verificada"
    else
        log "WARNING" "Problemas de integridade detectados"
    fi
    
    # Determinar status final
    if [ $success_count -eq $total_components ]; then
        status="SUCCESS"
        log "SUCCESS" "Backup completo: $success_count/$total_components componentes"
    elif [ $success_count -gt 0 ]; then
        status="PARTIAL"
        log "WARNING" "Backup parcial: $success_count/$total_components componentes"
    else
        status="FAILED"
        log "ERROR" "Backup falhou: $success_count/$total_components componentes"
    fi
    
    # Limpar backups antigos
    cleanup_old_backups
    
    # Calcular dura√ß√£o
    local end_time=$(date +%s)
    local duration=$(($end_time - $start_time))
    local duration_formatted=$(printf "%02d:%02d:%02d" $((duration/3600)) $((duration%3600/60)) $((duration%60)))
    
    # Criar relat√≥rio
    create_backup_report "$backup_path" "$start_time" "$end_time" "$status"
    
    # Enviar notifica√ß√£o
    send_backup_summary "$backup_path" "$status" "$duration_formatted"
    
    log "INFO" "=== BACKUP FINALIZADO ==="
    log "INFO" "Status: $status"
    log "INFO" "Dura√ß√£o: $duration_formatted"
    log "INFO" "Componentes: $success_count/$total_components"
    
    # Retornar c√≥digo baseado no status
    case $status in
        "SUCCESS") return 0 ;;
        "PARTIAL") return 1 ;;
        "FAILED") return 2 ;;
    esac
}

# Fun√ß√£o para configurar backup autom√°tico
setup_automatic_backup() {
    log "INFO" "Configurando backup autom√°tico di√°rio..."
    
    # Criar entrada no crontab
    local cron_entry="0 2 * * * $0 --run-backup >/dev/null 2>&1"
    
    # Verificar se j√° existe
    if crontab -l 2>/dev/null | grep -q "$0"; then
        log "INFO" "Backup autom√°tico j√° configurado"
    else
        # Adicionar ao crontab
        (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
        log "SUCCESS" "Backup autom√°tico configurado para executar diariamente √†s 02:00"
        
        send_whatsapp_notification "‚öôÔ∏è *Backup Autom√°tico Configurado*\n\nSistema de backup configurado com sucesso!\n\nüìÖ **Agendamento:** Di√°rio √†s 02:00\nüîß **Comando:** $0\nüìç **Local:** $BACKUP_DIR\n\n‚úÖ Backup autom√°tico ativo" "info"
    fi
}

# Fun√ß√£o para teste de backup
test_backup() {
    log "INFO" "Executando teste de backup..."
    
    # Criar diret√≥rio de teste
    local test_dir="$BACKUP_DIR/test_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$test_dir"
    
    # Executar backup de teste (componentes b√°sicos)
    local test_success=true
    
    # Testar backup da aplica√ß√£o
    if backup_application "$test_dir"; then
        log "SUCCESS" "Teste: Backup da aplica√ß√£o OK"
    else
        log "ERROR" "Teste: Falha no backup da aplica√ß√£o"
        test_success=false
    fi
    
    # Testar backup do banco se dispon√≠vel
    if docker ps --format "{{.Names}}" | grep -q "$DB_CONTAINER"; then
        if backup_database "$test_dir"; then
            log "SUCCESS" "Teste: Backup do banco OK"
        else
            log "WARNING" "Teste: Falha no backup do banco"
        fi
    fi
    
    # Limpar teste
    rm -rf "$test_dir"
    
    if $test_success; then
        log "SUCCESS" "Teste de backup conclu√≠do com sucesso"
        send_whatsapp_notification "üß™ *Teste de Backup*\n\n‚úÖ Teste executado com sucesso!\n\nSistema de backup est√° funcionando corretamente." "success"
        return 0
    else
        log "ERROR" "Teste de backup falhou"
        send_whatsapp_notification "üß™ *Teste de Backup*\n\n‚ùå Teste falhou!\n\nVerificar configura√ß√µes do sistema de backup." "error"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    # Criar diret√≥rios necess√°rios
    sudo mkdir -p "$BACKUP_DIR" 2>/dev/null || true
    sudo chown -R $USER:$USER "$BACKUP_DIR" 2>/dev/null || true
    sudo touch "$LOG_FILE" 2>/dev/null || true
    sudo chown $USER:$USER "$LOG_FILE" 2>/dev/null || true
    
    case "${1:-}" in
        "--run-backup")
            main_backup
            ;;
        "--setup")
            setup_automatic_backup
            ;;
        "--test")
            test_backup
            ;;
        "--cleanup")
            cleanup_old_backups
            ;;
        "--help"|"-h")
            echo "KRYONIX - Sistema de Backup Autom√°tico"
            echo ""
            echo "Uso: $0 [OP√á√ÉO]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --run-backup    Executar backup completo"
            echo "  --setup         Configurar backup autom√°tico"
            echo "  --test          Executar teste de backup"
            echo "  --cleanup       Limpar backups antigos"
            echo "  --help, -h      Mostrar esta ajuda"
            echo ""
            ;;
        "")
            main_backup
            ;;
        *)
            echo "Op√ß√£o inv√°lida: $1"
            echo "Use '$0 --help' para ver as op√ß√µes dispon√≠veis"
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
