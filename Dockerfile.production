# Dockerfile multi-stage otimizado para KRYONIX
# Focado em performance, segurança e size para produção brasileira

# === STAGE 1: Base comum ===
FROM node:18-alpine AS base

# Metadados da imagem
LABEL maintainer="KRYONIX Team <tech@kryonix.com.br>"
LABEL description="KRYONIX - Plataforma SaaS Brasileira de Automação"
LABEL version="1.0.0"
LABEL vendor="KRYONIX"

# Configurar timezone brasileiro
ENV TZ=America/Sao_Paulo
RUN apk add --no-cache tzdata && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone

# Instalar dependências básicas necessárias
RUN apk add --no-cache \
    libc6-compat \
    ca-certificates \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Configurar usuário não-root para segurança
RUN addgroup --system --gid 1001 kryonix && \
    adduser --system --uid 1001 kryonix

# Configurar diretório de trabalho
WORKDIR /app

# Configurar npm para performance
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fund false && \
    npm config set audit false

# === STAGE 2: Dependencies ===
FROM base AS deps

# Copiar apenas arquivos de dependências
COPY package*.json ./
COPY .npmrc* ./

# Instalar dependências de produção apenas
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# === STAGE 3: Builder ===
FROM base AS builder

# Copiar arquivos de dependências
COPY package*.json ./
COPY .npmrc* ./

# Instalar todas as dependências (incluindo dev)
RUN npm ci --no-audit --no-fund

# Copiar código fonte
COPY . .

# Configurar variáveis de ambiente para build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV VITE_API_URL=/api
ENV VITE_APP_NAME=KRYONIX
ENV VITE_APP_VERSION=1.0.0

# Build da aplicação
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# === STAGE 4: Runtime ===
FROM base AS runtime

# Configurar variáveis de ambiente de produção
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0
ENV TZ=America/Sao_Paulo

# Configurações de performance para Node.js
ENV NODE_OPTIONS="--max-old-space-size=1024 --optimize-for-size"

# Configurações de segurança
ENV HELMET_ENABLED=true
ENV RATE_LIMIT_ENABLED=true

# Criar diretórios necessários
RUN mkdir -p /app/dist /app/logs /app/uploads && \
    chown -R kryonix:kryonix /app

# Copiar dependências de produção
COPY --from=deps --chown=kryonix:kryonix /app/node_modules ./node_modules

# Copiar build da aplicação
COPY --from=builder --chown=kryonix:kryonix /app/dist ./dist
COPY --from=builder --chown=kryonix:kryonix /app/package*.json ./

# Copiar arquivos estáticos necessários
COPY --from=builder --chown=kryonix:kryonix /app/public ./public

# Copiar script de inicialização
COPY --chown=kryonix:kryonix docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Configurar healthcheck
COPY --chown=kryonix:kryonix docker/healthcheck.js /healthcheck.js

# Mudar para usuário não-root
USER kryonix

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node /healthcheck.js

# Usar dumb-init para proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Comando de inicialização
CMD ["/entrypoint.sh"]

# === STAGE 5: Development (opcional) ===
FROM base AS development

# Instalar dependências adicionais para desenvolvimento
RUN apk add --no-cache git

# Copiar package files
COPY package*.json ./

# Instalar todas as dependências
RUN npm ci --no-audit --no-fund

# Copiar código fonte
COPY . .

# Configurar variáveis de desenvolvimento
ENV NODE_ENV=development
ENV VITE_API_URL=http://localhost:8080/api

# Expor portas de desenvolvimento
EXPOSE 3000 8080

# Comando para desenvolvimento
CMD ["npm", "run", "dev"]

# === STAGE 6: Testing ===
FROM builder AS testing

# Instalar dependências de teste adicionais
RUN apk add --no-cache \
    chromium \
    firefox \
    webkit2gtk \
    && rm -rf /var/cache/apk/*

# Configurar Playwright
ENV PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

# Instalar browsers do Playwright
RUN npx playwright install chromium firefox webkit

# Configurar variáveis de teste
ENV NODE_ENV=test
ENV CI=true

# Executar testes
RUN npm run test:ci

# === STAGE 7: Production (final) ===
FROM runtime AS production

# Metadados finais
LABEL stage="production"
LABEL build-date="${BUILD_DATE}"
LABEL git-commit="${GIT_COMMIT}"
LABEL git-branch="${GIT_BRANCH}"

# Configurações finais de segurança
RUN apk del --no-cache \
    curl \
    && rm -rf /var/cache/apk/* \
    && find /app -name "*.md" -delete \
    && find /app -name "*.txt" -delete \
    && find /app -name "*.log" -delete

# Verificação final de segurança
RUN set -eux; \
    # Verificar se não está rodando como root
    [ "$(id -u)" = "1001" ]; \
    # Verificar se os arquivos têm as permissões corretas
    [ "$(stat -c %U /app)" = "kryonix" ]; \
    # Verificar se o Node.js está funcionando
    node --version; \
    # Verificar se a aplicação pode ser iniciada
    timeout 10 node dist/server/node-build.mjs --version || true

# Limpar cache final
RUN rm -rf /tmp/* /var/tmp/* /home/kryonix/.npm

# Informações da imagem
RUN echo "KRYONIX v1.0.0 - Plataforma SaaS Brasileira" > /app/version.txt && \
    echo "Build: $(date)" >> /app/version.txt && \
    echo "Node: $(node --version)" >> /app/version.txt && \
    echo "NPM: $(npm --version)" >> /app/version.txt

# Volume para dados persistentes
VOLUME ["/app/uploads", "/app/logs"]

# Labels de metadata do OCI
LABEL org.opencontainers.image.title="KRYONIX"
LABEL org.opencontainers.image.description="Plataforma SaaS Brasileira de Automação e Marketing Digital"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="KRYONIX"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/kryonix/kryonix-platform"
LABEL org.opencontainers.image.documentation="https://docs.kryonix.com.br"
LABEL org.opencontainers.image.url="https://kryonix.com.br"
