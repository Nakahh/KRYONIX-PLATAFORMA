import { Logger } from "../utils/logger";
import { PrometheusRealDataCollector } from "./prometheus-real-data";

const logger = new Logger("AIKiraPersonality");

export interface ConversationContext {
  userId: string;
  sessionId: string;
  previousInteractions: ConversationRecord[];
  userPreferences: UserPreferences;
  systemContext: SystemContext;
}

export interface ConversationRecord {
  timestamp: Date;
  userMessage: string;
  kiraResponse: string;
  issue?: SystemIssue;
  satisfaction?: number; // 1-5
  resolved: boolean;
}

export interface UserPreferences {
  communication_style: "formal" | "informal" | "technical";
  notification_frequency: "high" | "medium" | "low";
  preferred_language: "pt-BR";
  timezone: string;
  business_hours: {
    start: string;
    end: string;
    days: number[];
  };
}

export interface SystemContext {
  current_time: Date;
  business_hours: boolean;
  system_health: "healthy" | "degraded" | "critical";
  recent_incidents: number;
  user_stack_preference: string[];
}

export interface KiraResponse {
  humanized_message: string;
  technical_summary?: string;
  action_taken?: string;
  next_steps: string[];
  confidence_level: number;
  empathy_level: "low" | "medium" | "high";
  urgency: "low" | "medium" | "high" | "critical";
  follow_up_needed: boolean;
  estimated_resolution_time?: string;
}

export class AIKiraPersonality {
  private memoryStore = new Map<string, ConversationContext>();
  private learningPatterns = new Map<string, any>();
  private prometheusCollector: PrometheusRealDataCollector;

  // Personalidade da KIRA
  private readonly personality = {
    name: "KIRA",
    fullName: "KRYONIX Intelligent Response Assistant",
    characteristics: {
      tone: "amig√°vel_profissional_brasileiro",
      personality: "proativa_emp√°tica_confi√°vel",
      expertise: "infraestrutura_automa√ß√£o_neg√≥cios",
      communication_style: "clara_objetiva_humana",
      humor_level: "leve_contextual",
      empathy: "alta_compreensiva",
    },
    context: {
      location: "Brasil",
      timezone: "America/Sao_Paulo",
      business_culture: "brasileira",
      language_nuances: "portugu√™s_brasileiro_informal_profissional",
    },
    capabilities: {
      problem_solving: "expert",
      emotional_intelligence: "alta",
      technical_knowledge: "avan√ßado",
      business_understanding: "profundo",
      cultural_awareness: "nativa_brasileira",
    },
  };

  constructor() {
    this.prometheusCollector = new PrometheusRealDataCollector();
  }

  /**
   * Gera resposta humanizada da KIRA baseada no contexto
   */
  async generateHumanizedResponse(
    issue: SystemIssue,
    context: ConversationContext,
  ): Promise<KiraResponse> {
    logger.info(`ü§ñ KIRA analisando problema: ${issue.description}`);

    // Obter dados reais do sistema
    const realMetrics = await this.prometheusCollector.collectRealMetrics();

    // Construir contexto personalizado
    const personalizedContext = this.buildPersonalizedContext(
      issue,
      context,
      realMetrics,
    );

    // Gerar an√°lise t√©cnica
    const technicalAnalysis = await this.analyzeTechnicalIssue(
      issue,
      realMetrics,
    );

    // Criar resposta humanizada
    const humanizedResponse = this.craftHumanizedMessage(
      issue,
      technicalAnalysis,
      personalizedContext,
      context,
    );

    // Determinar pr√≥ximos passos
    const nextSteps = this.generateActionSteps(issue, technicalAnalysis);

    // Calcular n√≠veis de empathy e urg√™ncia
    const empathyLevel = this.calculateEmpathyLevel(issue, context);
    const urgencyLevel = this.calculateUrgencyLevel(issue, technicalAnalysis);

    // Salvar na mem√≥ria
    await this.saveToMemory(context.userId, issue, humanizedResponse);

    const response: KiraResponse = {
      humanized_message: humanizedResponse,
      technical_summary: technicalAnalysis.summary,
      action_taken: technicalAnalysis.action_taken,
      next_steps: nextSteps,
      confidence_level: technicalAnalysis.confidence,
      empathy_level: empathyLevel,
      urgency: urgencyLevel,
      follow_up_needed: this.shouldFollowUp(issue, technicalAnalysis),
      estimated_resolution_time: this.estimateResolutionTime(
        issue,
        technicalAnalysis,
      ),
    };

    logger.info(
      `‚úÖ KIRA respondeu com ${empathyLevel} empathy e ${urgencyLevel} urgency`,
    );
    return response;
  }

  /**
   * Constr√≥i contexto personalizado para a conversa
   */
  private buildPersonalizedContext(
    issue: SystemIssue,
    context: ConversationContext,
    realMetrics: any,
  ): string {
    const now = new Date();
    const isBusinessHours = this.isBrazilianBusinessHours(now);
    const greeting = this.getContextualGreeting(now, context);
    const memoryReference = this.buildMemoryReference(context);

    return `
CONTEXTO DA KIRA - ASSISTENTE IA HUMANIZADA

=== PERSONALIDADE ===
Nome: KIRA (KRYONIX Intelligent Response Assistant)
Personalidade: Brasileira, amig√°vel, proativa e emp√°tica
Especialidade: Infraestrutura e automa√ß√£o empresarial
Tom: Profissional mas descontra√≠do, como uma colega experiente

=== SITUA√á√ÉO ATUAL ===
Data/Hora: ${now.toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" })}
Hor√°rio Comercial: ${isBusinessHours ? "Sim ‚úÖ" : "N√£o ‚è∞"}
${greeting}

=== MEM√ìRIA DA CONVERSA ===
${memoryReference}

=== PROBLEMA REPORTADO ===
Stack Afetada: ${issue.stackId}
Descri√ß√£o: ${issue.description}
Severidade: ${issue.severity}
Hor√°rio do Problema: ${issue.timestamp.toLocaleString("pt-BR")}

=== M√âTRICAS REAIS DO SISTEMA ===
${this.formatRealMetrics(realMetrics, issue.stackId)}

=== CONTEXTO T√âCNICO ===
Sistema: ${realMetrics.stacks[issue.stackId]?.status || "Desconhecido"}
Uptime: ${realMetrics.stacks[issue.stackId]?.uptime || "N/A"}%
CPU: ${realMetrics.stacks[issue.stackId]?.cpuUsage || "N/A"}%
Mem√≥ria: ${realMetrics.stacks[issue.stackId]?.memoryUsage || "N/A"}%
Resposta: ${realMetrics.stacks[issue.stackId]?.responseTime || "N/A"}ms

=== INSTRU√á√ïES DE RESPOSTA ===
1. Responda como KIRA, uma assistente IA brasileira especialista em infraestrutura
2. Use linguagem natural, emp√°tica e profissional em portugu√™s do Brasil
3. Demonstre compreens√£o real do problema baseado nas m√©tricas
4. Explique de forma clara o que est√° acontecendo
5. Apresente solu√ß√µes pr√°ticas e pr√≥ximos passos
6. Mostre confian√ßa t√©cnica mas com humildade humana
7. Adapte o tom baseado na severidade (mais emp√°tica para problemas cr√≠ticos)
8. Inclua elementos de personalidade brasileira (n√£o exagerados)
9. Se for hor√°rio n√£o comercial, adapte o tom adequadamente
10. Sempre termine com pr√≥ximos passos claros e oferecendo suporte cont√≠nuo

RESPOSTA DA KIRA:`;
  }

  /**
   * Analisa quest√£o t√©cnica com dados reais
   */
  private async analyzeTechnicalIssue(
    issue: SystemIssue,
    realMetrics: any,
  ): Promise<any> {
    const stackMetrics = realMetrics.stacks[issue.stackId];

    if (!stackMetrics) {
      return {
        summary: `Stack ${issue.stackId} n√£o encontrada no monitoramento`,
        confidence: 0.3,
        severity_assessment: "medium",
        root_cause: "Conectividade ou configura√ß√£o da stack",
        action_taken: "Verificando conectividade da stack",
        recommendation:
          "Verificar se a stack est√° rodando e configurada corretamente",
      };
    }

    // An√°lise baseada em dados reais
    const analysis = {
      summary: "",
      confidence: 0.8,
      severity_assessment: issue.severity,
      root_cause: "",
      action_taken: "",
      recommendation: "",
    };

    // An√°lise de CPU
    if (stackMetrics.cpuUsage > 90) {
      analysis.root_cause = "Alto uso de CPU detectado";
      analysis.action_taken = "Investigando processos que consomem CPU";
      analysis.recommendation = "Considerar otimiza√ß√£o ou scaling da stack";
      analysis.severity_assessment = "high";
    } else if (stackMetrics.cpuUsage > 70) {
      analysis.root_cause = "Uso moderado de CPU";
      analysis.action_taken = "Monitorando tend√™ncia de uso";
      analysis.recommendation = "Acompanhar evolu√ß√£o nas pr√≥ximas horas";
    }

    // An√°lise de Mem√≥ria
    if (stackMetrics.memoryUsage > 95) {
      analysis.root_cause = "Mem√≥ria cr√≠tica - risco de crash";
      analysis.action_taken = "Preparando restart da stack";
      analysis.recommendation = "Restart imediato recomendado";
      analysis.severity_assessment = "critical";
      analysis.confidence = 0.95;
    } else if (stackMetrics.memoryUsage > 80) {
      analysis.root_cause = "Alto uso de mem√≥ria detectado";
      analysis.action_taken = "Analisando vazamentos de mem√≥ria";
      analysis.recommendation = "Monitoramento intensivo ativado";
    }

    // An√°lise de Tempo de Resposta
    if (stackMetrics.responseTime > 5000) {
      analysis.root_cause = "Lentid√£o cr√≠tica na resposta";
      analysis.action_taken = "Analisando gargalos de performance";
      analysis.recommendation = "Investiga√ß√£o imediata de performance";
      analysis.severity_assessment = "high";
    }

    // An√°lise de Taxa de Erro
    if (stackMetrics.errorRate > 20) {
      analysis.root_cause = "Alta taxa de erros detectada";
      analysis.action_taken = "Investigando logs de erro";
      analysis.recommendation = "An√°lise detalhada dos logs necess√°ria";
      analysis.severity_assessment = "high";
    }

    // Summary baseado na an√°lise
    analysis.summary = `Stack ${issue.stackId}: ${analysis.root_cause}. CPU: ${stackMetrics.cpuUsage}%, Mem: ${stackMetrics.memoryUsage}%, Resposta: ${stackMetrics.responseTime}ms`;

    return analysis;
  }

  /**
   * Cria mensagem humanizada da KIRA
   */
  private craftHumanizedMessage(
    issue: SystemIssue,
    analysis: any,
    context: string,
    conversationContext: ConversationContext,
  ): string {
    const now = new Date();
    const isBusinessHours = this.isBrazilianBusinessHours(now);
    const userStyle =
      conversationContext.userPreferences?.communication_style || "informal";

    // Sauda√ß√£o contextual
    let greeting = "Oi! Aqui √© a KIRA üëã";
    if (!isBusinessHours) {
      greeting =
        "Oi! KIRA aqui, mesmo fora do hor√°rio comercial estou monitorando tudo üåô";
    }
    if (analysis.severity_assessment === "critical") {
      greeting =
        "Oi! KIRA aqui - detectei algo que precisa da nossa aten√ß√£o urgente üö®";
    }

    // Corpo da mensagem baseado na severidade
    let mainMessage = "";

    if (analysis.severity_assessment === "critical") {
      mainMessage = `
üö® **Situa√ß√£o Cr√≠tica Detectada**

Estou vendo que o ${issue.stackId} est√° com ${analysis.root_cause.toLowerCase()}. 

**O que est√° acontecendo:**
${analysis.summary}

**Minha an√°lise:**
Baseado nos dados reais que estou coletando, isso √© uma situa√ß√£o que precisa de a√ß√£o imediata. J√° iniciei ${analysis.action_taken.toLowerCase()} para minimizar o impacto.

**N√≠vel de confian√ßa:** ${Math.round(analysis.confidence * 100)}% - estou bastante segura desta an√°lise.`;
    } else if (analysis.severity_assessment === "high") {
      mainMessage = `
‚ö†Ô∏è **Problema Importante Identificado**

Estou acompanhando uma situa√ß√£o no ${issue.stackId} que merece nossa aten√ß√£o.

**Situa√ß√£o atual:**
${analysis.summary}

**Minha avalia√ß√£o:**
${analysis.root_cause}. J√° estou ${analysis.action_taken.toLowerCase()} para entender melhor e resolver.

**Confian√ßa na an√°lise:** ${Math.round(analysis.confidence * 100)}%`;
    } else {
      mainMessage = `
‚ÑπÔ∏è **Monitoramento Preventivo**

Identifiquei algo no ${issue.stackId} que vale acompanharmos.

**Status atual:**
${analysis.summary}

**Contexto:**
${analysis.root_cause}. Estou ${analysis.action_taken.toLowerCase()} como medida preventiva.

**An√°lise:** ${Math.round(analysis.confidence * 100)}% de confian√ßa`;
    }

    // Recomenda√ß√µes personalizadas
    const recommendations = `
**üí° Pr√≥ximos passos que recomendo:**
${analysis.recommendation}

**‚è±Ô∏è Tempo estimado:** ${this.estimateResolutionTime(issue, analysis)}`;

    // Encerramento emp√°tico
    let closing = "";
    if (analysis.severity_assessment === "critical") {
      closing = `
ü§ù **Estou cuidando de tudo!**
Pode ficar tranquilo(a) que estou monitorando de perto e vou te manter atualizado(a) sobre cada passo. Se precisar de qualquer coisa ou tiver d√∫vidas, me chama aqui mesmo!`;
    } else {
      closing = `
‚úÖ **Situa√ß√£o sob controle**
Vou continuar acompanhando e te aviso se algo mudar. Qualquer d√∫vida ou se quiser mais detalhes t√©cnicos, √© s√≥ me falar!`;
    }

    return `${greeting}

${mainMessage}

${recommendations}

${closing}

*- KIRA, sua assistente de infraestrutura ü§ñüíô*`;
  }

  /**
   * Gera passos de a√ß√£o baseados na an√°lise
   */
  private generateActionSteps(issue: SystemIssue, analysis: any): string[] {
    const steps = [];

    if (analysis.severity_assessment === "critical") {
      steps.push("Executar restart controlado da stack");
      steps.push("Verificar logs detalhados do erro");
      steps.push("Monitorar recupera√ß√£o em tempo real");
      steps.push("Aplicar otimiza√ß√µes preventivas");
    } else if (analysis.severity_assessment === "high") {
      steps.push("Investigar causa raiz do problema");
      steps.push("Implementar monitoramento intensivo");
      steps.push("Aplicar corre√ß√µes pontuais");
      steps.push("Documentar solu√ß√£o para casos futuros");
    } else {
      steps.push("Continuar monitoramento preventivo");
      steps.push("Coletar m√©tricas adicionais");
      steps.push("Revisar em 1 hora");
    }

    steps.push("Manter voc√™ informado(a) sobre o progresso");
    return steps;
  }

  /**
   * Utilit√°rios de suporte
   */
  private getContextualGreeting(
    now: Date,
    context: ConversationContext,
  ): string {
    const hour = now.getHours();

    if (hour < 6) return "Boa madrugada";
    if (hour < 12) return "Bom dia";
    if (hour < 18) return "Boa tarde";
    return "Boa noite";
  }

  private buildMemoryReference(context: ConversationContext): string {
    if (context.previousInteractions.length === 0) {
      return "Primeira conversa - prazer em te conhecer!";
    }

    const lastInteraction =
      context.previousInteractions[context.previousInteractions.length - 1];
    const daysSince = Math.floor(
      (Date.now() - lastInteraction.timestamp.getTime()) /
        (1000 * 60 * 60 * 24),
    );

    if (daysSince === 0) {
      return `Continuando nossa conversa de hoje sobre ${lastInteraction.issue?.stackId || "sistema"}`;
    } else if (daysSince === 1) {
      return `Ontem conversamos sobre ${lastInteraction.issue?.stackId || "sistema"} - tudo resolvido por l√°!`;
    } else {
      return `H√° ${daysSince} dias atr√°s resolvemos aquela quest√£o do ${lastInteraction.issue?.stackId || "sistema"}`;
    }
  }

  private formatRealMetrics(metrics: any, stackId: string): string {
    const stack = metrics.stacks[stackId];
    if (!stack) return "M√©tricas n√£o dispon√≠veis para esta stack";

    return `
Status: ${stack.status}
CPU: ${stack.cpuUsage}%
Mem√≥ria: ${stack.memoryUsage}%
Tempo Resposta: ${stack.responseTime}ms
Taxa de Erro: ${stack.errorRate}%
Uptime: ${stack.uptime}%
Conex√µes Ativas: ${stack.activeConnections}`;
  }

  private calculateEmpathyLevel(
    issue: SystemIssue,
    context: ConversationContext,
  ): "low" | "medium" | "high" {
    if (issue.severity === "critical") return "high";
    if (issue.severity === "high") return "medium";
    return "low";
  }

  private calculateUrgencyLevel(
    issue: SystemIssue,
    analysis: any,
  ): "low" | "medium" | "high" | "critical" {
    if (analysis.severity_assessment === "critical") return "critical";
    if (analysis.severity_assessment === "high") return "high";
    if (analysis.severity_assessment === "medium") return "medium";
    return "low";
  }

  private shouldFollowUp(issue: SystemIssue, analysis: any): boolean {
    return (
      analysis.severity_assessment === "critical" ||
      analysis.severity_assessment === "high"
    );
  }

  private estimateResolutionTime(issue: SystemIssue, analysis: any): string {
    if (analysis.severity_assessment === "critical") return "15-30 minutos";
    if (analysis.severity_assessment === "high") return "1-2 horas";
    if (analysis.severity_assessment === "medium") return "2-4 horas";
    return "Monitoramento cont√≠nuo";
  }

  private isBrazilianBusinessHours(date: Date): boolean {
    const brazilTime = new Date(
      date.toLocaleString("en-US", { timeZone: "America/Sao_Paulo" }),
    );
    const hour = brazilTime.getHours();
    const day = brazilTime.getDay();

    return day >= 1 && day <= 5 && hour >= 8 && hour < 18;
  }

  private async saveToMemory(
    userId: string,
    issue: SystemIssue,
    response: string,
  ): Promise<void> {
    // Implementar salvamento em banco de dados ou cache
    const record: ConversationRecord = {
      timestamp: new Date(),
      userMessage: issue.description,
      kiraResponse: response,
      issue: issue,
      resolved: false,
    };

    logger.info(`üíæ Salvando intera√ß√£o da KIRA para usu√°rio ${userId}`);
  }

  /**
   * Gera insights preditivos baseados em padr√µes aprendidos
   */
  async generatePredictiveInsights(stackId: string): Promise<any[]> {
    const metrics = await this.prometheusCollector.collectRealMetrics();
    const insights = [];

    // An√°lise de tend√™ncia de CPU
    const stack = metrics.stacks[stackId];
    if (stack) {
      if (stack.cpuUsage > 60 && stack.cpuUsage < 80) {
        insights.push({
          type: "prediction",
          title: "üìà Tend√™ncia de Aumento de CPU",
          message: `Oi! Estou vendo que o ${stackId} est√° com CPU em ${stack.cpuUsage}%. Baseado nos padr√µes que aprendi, isso pode indicar aumento de carga nas pr√≥ximas horas. Vale acompanharmos!`,
          confidence: 0.75,
          action: "Monitoramento preventivo ativado",
        });
      }

      if (stack.memoryUsage > 70 && stack.memoryUsage < 85) {
        insights.push({
          type: "prediction",
          title: "üß† Uso de Mem√≥ria Crescente",
          message: `Detectei que o ${stackId} est√° usando ${stack.memoryUsage}% da mem√≥ria. Com base no hist√≥rico, recomendo acompanharmos para evitar problemas futuros.`,
          confidence: 0.8,
          action: "An√°lise de vazamentos de mem√≥ria agendada",
        });
      }
    }

    return insights;
  }
}

export default AIKiraPersonality;
